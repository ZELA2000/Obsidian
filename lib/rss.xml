<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Obsidian</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 24 Jun 2024 12:18:37 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 24 Jun 2024 12:18:26 GMT</pubDate><copyright><![CDATA[zela2000]]></copyright><ttl>60</ttl><dc:creator>zela2000</dc:creator><item><title><![CDATA[File CSV]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\gestione-file\file-csv.html</link><guid isPermaLink="false">Java/Gestione File/File CSV.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 24 Jun 2024 12:06:18 GMT</pubDate></item><item><title><![CDATA[Operazioni sui file]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><img alt="66gjhb8h.bmp" src="lib\media\66gjhb8h.bmp"><br>
<img alt="ywuhnty2.bmp" src="lib\media\ywuhnty2.bmp"><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\gestione-file\operazioni-sui-file.html</link><guid isPermaLink="false">Java/Gestione File/Operazioni sui file.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 24 Jun 2024 12:05:56 GMT</pubDate><enclosure url="lib\media\66gjhb8h.bmp" length="0" type="image/bmp"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\66gjhb8h.bmp&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Serializzazione e Deserializzazione]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\gestione-file\serializzazione-e-deserializzazione.html</link><guid isPermaLink="false">Java/Gestione File/Serializzazione e Deserializzazione.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 24 Jun 2024 12:06:01 GMT</pubDate></item><item><title><![CDATA[Serializzazione e persistenza degli oggetti su file]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>Java dà la possibilità di leggere e scrivere direttamente variabili primitive e, addirittura, oggetti, sfruttando la cosiddetta serializzazione che è una particolare funzionalità che permette di tradurre<br>
le variabili e gli oggetti in uno stream di byte che può essere salvato in maniera persistente in un file binario (cioè è possibile riutilizzare gli oggetti dopo il termine dell’applicazione.<br>Normalmente gli oggetti non sono più riutilizzabili al termine dell’applicazione che li ha generati.<br>Questo stream di byte successivamente può essere riletto e trasformato attraverso un operazione inversa di deserializzazione, per ottenere le variabili e gli oggetti originari.<br><br>La scrittura/lettura di oggetti viene realizzata utilizzando la classe ObjectFileWriter e ObjectFileReader del package java.io, istanziati a partire da oggetti delle classi FileOutputStream e FileInputStream<br>// creazione di uno stream di output serializzato
FileOutputStream destinazione = new FileOutputStream(“out.dat”);
ObjectOutputStreamoutF= new ObjectOutputStream(destinazione);
// creazione di uno stream di input deserializzato
FileInputStream sorgente= new FileInputStream(“in.dat”);
ObjectInputStream inF= new ObjectInputStream(sorgente);
Copy<br><br>Vediamo un semplice esempio che utilizza la serializzazione per scrivere e leggere oggetto di tipi S_alunno, la cui struttura è questa:<br>import java.io.Serializable; //per IO su file
public class S_Alunno implements Serializable{
int matricola;
String cognome;
String nome;
char classe;
char sezione;
String corso;
int debiti;
}
Copy<br>Memorizziamo in un file binario Alunni.dat gli alunni che hanno debiti a settembre: apriamo il file utilizzando la notazione sintetica per la creazione dell’oggetto outF, dopo aver creato un nuovo alunno e aggiornato i suoi dati (per esplicita solo cognome, nome e crediti) lo scriviamo nel file semplicemente con il metodo writeObject (il mio oggetto);<br>static void scriviRecord() throws IOException{
String cognome;
String nome;
int debiti;
Scanner in = new Scanner(System.in);
ObjectOutputStream outF = new ObjectOutputStream(new FileOutputStream(miofile));
for (int x = 0; x &lt; nrRecord; x++){
S_Alunno a1 = new S_Alunno();
System.out.print("Inserisci il cognome: ");
a1.cognome = in.nextLine();
System.out.print("Inserisci il nome: ");
a1.nome = in.nextLine();
System.out.print("Inserisci nr. debiti: ");
a1.debiti = in.nextInt();
in.nextLine(); // per pulire il buffer
outF.writeObject(a1);
}
outF.flush();
outF.close();
}
Copy<br>Per la lettura apriamo il file per la creazione dell’oggetto inF e leggiamo gli elementi presenti in esso tramite un ciclo che visualizza il loro contenuto sullo schermo:<br>static void leggiRecord() throws IOException,ClassNotFoundException {
//LEGGE l'oggetto alunno salvato nel file, tramite la deserializzazione
ObjectInputStream inF = new ObjectInputStream(new FileInputStream(miofile));
for (int x = 0; x &lt; nrRecord; x++){
S_Alunno a1 = new S_Alunno();
a1 = (S_Alunno) inF.readObject();
System.out.println(a1.cognome + " " + a1.nome + " " + a1.debiti);
}
inF.close();
}
Copy<br>Completano il programma:<br>
<br>la definizione dei dati globali:
<br>// legge e scrive oggetti in un file serializzandoli
import java.io.*;
import java.io.RandomAccessFile;
import java.util.Scanner;
public class FileRecordOggetti{
static final String miofile = "alunni.dat";
static long tanti;
static int nrRecord = 2;
Copy<br>
<br>il metodo main() che si riduce alla chiamata dei due metodi, rispettivamente per la scrittura degli oggetti e per la successiva lettura:
<br>public static void main(String[] args) throws IOException,ClassNotFoundException{
// mostraMenu();
System.out.print("\nInserimento record da memorizzare su alunni.dat\n");
scriviRecord();
System.out.print("\nLettura record presenti in alunni.dat\n");
leggiRecord();
}
Copy<br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\gestione-file\serializzazione-e-persistenza-degli-oggetti-su-file.html</link><guid isPermaLink="false">Java/Gestione File/Serializzazione e persistenza degli oggetti su file.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 24 Jun 2024 12:06:09 GMT</pubDate></item><item><title><![CDATA[Esempio 1]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.event.*;

class Finestra extends JFrame{
	public Finestra(){
		super ("Finestra");
		setSize (200,200);
		addMouseListener (new AscoltatoreMouse());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
}

class AscoltatoreMouse implements MouseListener {
	public void mouseClicked (MouseEvent e){
		System.out.plintln ("clic del mouse nella posizione " + e.getX() + ", " + e.getY());
	}
	public void mouseEntered (MouseEvent e){
		System.out.println ("il mouse entra")
	}
	public void mouseExited(MouseEvent e) {
		System.out.println ("il mouse esce");
	}
	public void mousePressed(MouseEvent e) {
		System.out.println ("pulsante premuto nella posizione " + e.getX() + "," + e.getY());
	}
	public void mouseReleased(MouseEvent e) {
		System.out.println ("pulsante rilasciato nella posizione " + e.getX() + "," + e.getY());
	}
}
public class ascoltatoreMouseEsterno1 {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Eventi del mouse - classe ascoltatore esterna" data-href="Eventi del mouse - classe ascoltatore esterna" href="java\grafica\eventi-del-mouse-classe-ascoltatore-esterna.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a>]]></description><link>java\grafica\esempi\esempio-1.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Esempio 1.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Esempio 2]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.event.*;

class Finestra extends JFrame {
	int x, y;
	Finestra () {
		super ("ascoltatore Mouse Esterno");
		setSize (200, 200);
		addMouseListener (new AscoltatoreMouse (this));
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	public void visualizza () {
		JOptionPane.showMessageDialog (null,
		"posizione click: " + x + ", " + y);
	}
}

class AscoltatoreMouse implements MouseListener {
	private Finestra f;
	public AscoltatoreMouse (Finestra f) {
		this.f = f;
	}
	public void mouseClicked (MouseEvent e) {
		System.out.println ("click in " + e.getX () + ", " + e.getY ());
	}
	public void mouseEntered (MouseEvent e) {
		System.out.println ("mouse dentro");
	}
	public void mouseExited (MouseEvent e) {
		System.out.println ("mouse fuori");
	}
	public void mouseReleased (MouseEvent e) {
		System.out.println ("pulsante rilasciato in " + e.getX () + ", " + e.getY ());
	}
	public void mousePressed (MouseEvent e) {
		f.x = e.getX ();
		f.y = e.getY ();
		f.visualizza ();
	}
}

public class ascoltatoreMouseEsterno2 {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Eventi del mouse - classe ascoltatore esterna" data-href="Eventi del mouse - classe ascoltatore esterna" href="java\grafica\eventi-del-mouse-classe-ascoltatore-esterna.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\esempio-2.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Esempio 2.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Esempio che scrive la voce di menu selezionata in una casella di testo nella finestra]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
class Finestra extends JFrame {
	private JTextField testo;
	public Finestra () {
		setSize (300, 300);
		setTitle ("Prova Menu");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		testo = new JTextField ("Nessuna voce selezionata");
		Container sfondo = getContentPane ();
		sfondo.add (testo, "Center");
		AscoltatoreMenu ascoltatore = new AscoltatoreMenu ();
		// preparazione della barra dei menu
		JMenuBar barraMenu = new JMenuBar ();
		setJMenuBar (barraMenu);
		JMenu fileMenu = new JMenu ("File");
		barraMenu.add (fileMenu);
		JMenu secondoMenu = new Jmenu("Secondo");
		barraMenu.add (secondoMenu);
		// preparazione del menu File
		JMenuItem nuovo = new JMenuItem ("Nuovo");
		fileMenu.add (nuovo);
		nuovo.addActionListener (ascoltatore);
		JMenuItem esci = new JMenuItem ("Esci");
		fileMenu.add (esci);
		esci.addActionListener (ascoltatore);
		// preparazione del menu Secondo
		JMenuItem primaVoce = new JMenuItem ("Prima");
		secondoMenu.add (primaVoce);
		primaVoce.addActionListener (ascoltatore);
		JMenuItem secondaVoce = new JMenuItem ("Seconda");
		secondoMenu.add (secondaVoce);
		secondaVoce.addActionListener (ascoltatore);
		JMenu terzaVoce = new JMenu ("Terza");
		secondoMenu.add (terzaVoce);
		JMenuItem primo3 = new JMenuItem ("Prima voce terzo livello");
		terzaVoce.add (primo3);
		primo3.addActionListener (ascoltatore);
		JMenuItem secondo3 = new JMenuItem ("Seconda voce terzo livello");
		terzaVoce.add (secondo3);
		secondo3.addActionListener (ascoltatore);
		setVisible (true);
	}
	class AscoltatoreMenu implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			String comando = e.getActionCommand();
			if (comando.equals("Esci"))
				System.exit(0);
			else
				testo.setText (comando);
		}
	}
}
public class ProvaMenu {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Menu" data-href="Menu" href="java\grafica\menu.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\esempio-che-scrive-la-voce-di-menu-selezionata-in-una-casella-di-testo-nella-finestra.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Esempio che scrive la voce di menu selezionata in una casella di testo nella finestra.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Esempio di caselle combinate, pulsanti di selezione e caselle di controllo]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
class Finestra extends JFrame {
	private JTextField testo;
	private JCheckBox corsivo;
	private JCheckBox grassetto;
	private JRadioButton piccolo;
	private JRadioButton medio;
	private JRadioButton grande;
	private JComboBox selezione;
	public Finestra () {
		setSize (300, 300);
		setTitle ("Stili di testo");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		testo = new JTextField ("Testo di prova");
		testo.setEditable (false);
		GestoreScelta gestore = new GestoreScelta ();
		//casella combinata per la scelta del tipo dí carattere
		selezione = new JComboBox ();
		selezione.addItem ("Serif");
		selezione.addItem ("SansSerif");
		selezione.addItem ("Monospaced");
		selezione.setEditable (true);
		selezione.addActionListener (gestore);
		// pulsanti di selezione per la scelta della dimensione
		piccolo = new JRadioButton ("Piccolo");
		piccolo.setSelected(true);
		piccolo.addActionListener (gestore);
		medio = new JRadioButton ("Medio");
		medio.addActionListener (gestore);
		grande = new JRadioButton ("Grande");
		grande.addActionListener (gestore);
		ButtonGroup gruppoDim = new ButtonGroup ();
		gruppoDim.add (piccolo);
		gruppoDim.add (medio);
		gruppoDim.add (grande);
		// caselle di controllo per la scelta dello stile
		corsivo = new JCheckBox ("Corsivo");
		corsivo.addActionListener (gestore);
		grassetto = new JCheckBox ("Grassetto");
		grassetto.addActionListener (gestore);
		// preparazione della finestra
		JPanel pannello1 = new JPanel ();
		pannello1.add (selezione);
		JPanel pannello2 = new JPanel ();
		pannello2.add (piccolo);
		pannello2.add (medio);
		pannello2.add (grande);
		pannello2.setBorder (new TitledBorder (new EtchedBorder (), "Dimensione"));
		JPanel pannello3 = new JPanel ();
		pannello3.add (corsivo);
		pannello3.add (grassetto);
		pannello3.setBorder (new TitledBorder (new EtchedBorder (),"Stile"));
		JPanel pannelloStili = new JPanel ();
		pannelloStili.setLayout (new GridLayout (3, 1));
		pannelloStili.add (pannello1);
		pannelloStili.add (pannello2);
		pannelloStili.add (pannello3);
		Container sfondo = getContentPane ();
		sfondo.add (testo, "Center");
		sfondo.add (pannelloStili, "South");
		impostaTesto ();
		setVisible(true);
	}
	void impostaTesto () {
		String tipo = (String) selezione.getSelectedItem ();
		int stile = 0;
		if (corsivo.isSelected ())
			stile = stile + Font.ITALIC;
		if (grassetto.isSelected ())
			stile =stile + Font.BOLD;
		int dimensione = 0;
		if (piccolo.isSelected ())
			dimensione = 12;
		if (medio.isSelected ())
			dimensione = 16;
		if (grande.isSelected ())
			dimensione = 24;
		testo.setFont (new Font (tipo, stile, dimensione));
		testo.repaint();
	}
	class GestoreScelta implements ActionListener {
		public void actionPerformed(ActionEvent event) {
			impostaTesto ();
		}
	}
}
public class ProvaSceltaCarattere {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Caselle combinate" data-href="Caselle combinate" href="java\grafica\caselle-combinate.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\esempio-di-caselle-combinate,-pulsanti-di-selezione-e-caselle-di-controllo.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Esempio di caselle combinate, pulsanti di selezione e caselle di controllo.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Finestra con due pulsanti per far diventare rosso o verde lo sfondo con gestori di eventi separati]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class Finestra extends JFrame {
	private Container sfondo;
	public Finestra () {
		setSize (400, 200);
		setTitle ("Finestra");
		JButton pulsante1 = new JButton ("Rosso");
		pulsante1.addActionListener (new GestorePulsanteRosso ());
		JButton pulsante2 = new JButton ("Verde");
		pulsante2.addActionListener (new GestorePulsanteVerde ());
		sfondo = getContentPane ();
		sfondo.add (pulsante1, "East");
		sfondo.add (pulsante2, "West");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		setVisible (true);
	}
	class GestorePulsanteRosso implements ActionListener {
		public void actionPerformed (ActionEvent e) {
			sfondo.setBackground (Color.RED);
		}
	}
	class GestorePulsanteVerde implements ActionListener {
		public void actionPerformed (ActionEvent e) {
			sfondo.setBackground (Color.GREEN);
		}
	}
}
public class ProvaJButton1 {
	public static void main (String [] args) {
		Finestra finestra = new Finestra ();
	}
}

Copy<br><a data-tooltip-position="top" aria-label="Pulsanti" data-href="Pulsanti" href="java\grafica\pulsanti.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\finestra-con-due-pulsanti-per-far-diventare-rosso-o-verde-lo-sfondo-con-gestori-di-eventi-separati.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Finestra con due pulsanti per far diventare rosso o verde lo sfondo con gestori di eventi separati.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Finestra con due pulsanti per far diventare rosso o verde lo sfondo con un unico gestore di eventi per i due pulsanti]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class Finestra extends JFrame {
	private Container sfondo;
	private JButton pulsante1;
	private JButton pulsante2;
	public Finestra () {
		setSize (400, 200);
		setTitle ("Finestra");
		pulsante1 = new JButton ("Rosso");
		pulsante2 = new JButton ("Verde");
		GestorePulsanti gestore = new GestorePulsanti ();
		pulsante1.addActionListener (gestore);
		pulsante2.addActionListener (gestore);
		sfondo = getContentPane ();
		sfondo.add (pulsante1, "East");
		sfondo.add (pulsante2, "West");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		setVisible (true);
	}
	class GestorePulsanti implements ActionListener {
		public void actionPerformed (ActionEvent e) {
			if (e.getSource() == pulsante1)
				sfondo.setBackground (Color.RED);
			if (e.getSource () == pulsante2)
				sfondo.setBackground (Color.GREEN);
		}
	}
}
public class ProvaJButton1 {
	public static void main (String [] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Pulsanti" data-href="Pulsanti" href="java\grafica\pulsanti.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\finestra-con-due-pulsanti-per-far-diventare-rosso-o-verde-lo-sfondo-con-un-unico-gestore-di-eventi-per-i-due-pulsanti.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Finestra con due pulsanti per far diventare rosso o verde lo sfondo con un unico gestore di eventi per i due pulsanti.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Finestra con pannello con layout null]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.*;
class Finestra extends JFrame {
	public Finestra () {
		setSize (300, 300);
		setTitle ("Finestra");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		Container sfondo = getContentPane ();
		JPanel pannello = new JPanel ();
		pannello.setLayout (null);
		JButton uno = new JButton ("Uno");
		uno.setBounds (10, 10, 100, 30);
		pannello.add (uno);
		JButton due = new JButton ("Due");
		due.setBounds (100, 100, 150, 60);
		pannello.add (due);
		JButton tre = new JButton ("Tre");
		tre.setBounds (150, 200, 120, 50);
		pannello.add (tre);
		sfondo.add (pannello);
		setVisible (true);
	}
}
public class ProvaLayoutNull {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="GridBagLayout e CardLayout" data-href="GridBagLayout e CardLayout" href="java\grafica\gridbaglayout-e-cardlayout.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\finestra-con-pannello-con-layout-null.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Finestra con pannello con layout null.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Gestione degli eventi della finestra con classe ascoltatore coincidente con la finestra stessa]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.event.*;
class Finestra extends JFrame {
	public Finestra () {
		super ("Finestra");
		setBounds (200,200, 200,200);
		addWindowListener (new Finestra.AscoltatoreFinestra());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	class AscoltatoreFinestra implements WindowListener {
		public void windowOpened (WindowEvent e) {
			System.out.println ("aperta");
		}
		public void windowClosed (WindowEvent e) {
			System.out.println ("eliminata");
		}
		public void windowActivated (WindowEvent e) {
			System.out.println ("attivata");
		}
		public void windowDeactivated (WindowEvent e) {
			System.out.println ("disattivata");
		}
		public void windowIconified (WindowEvent e) {
			System.out.println ("ridotta a icona");
		}
		public void windowDeiconified (WindowEvent e) {
			System.out.println ("ripristinata");
		}
		public void windowClosing (WindowEvent e) {
			System.out.println ("chiusa");
		}
	}
}
public class provaAscltatoreFinestraInterno {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Eventi finestra" data-href="Eventi finestra" href="java\grafica\eventi-finestra.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\gestione-degli-eventi-della-finestra-con-classe-ascoltatore-coincidente-con-la-finestra-stessa.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Gestione degli eventi della finestra con classe ascoltatore coincidente con la finestra stessa.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Gestione degli eventi della finestra con classe ascoltatore esterna]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import java.awt.event.*;
import javax.swing.*;
class Finestra extends JFrame {
	public Finestra() {
		super ("Finestra");
		setBounds (200,200, 200,200);
		addWindowListener (new AscoltatoreFinestra ());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
}
class AscoltatoreFinestra implements WindowListener {
	public void windowOpened (WindowEvent e) {
		System.out.println ("aperta");
	}
	public void windowClosed (WindowEvent e) {
		System.out.println ("eliminata");
	}
	public void windowActivated (WindowEvent e) {
		System.out.println ("attivata");
	}
	public void windowDeactivated (WindowEvent e) {
		System.out.println ("disattivata");
	}
	public void windowIconified (WindowEvent e) {
		System.out.println ("ridotta a icona");
	}
	public void windowDeiconified (WindowEvent e) {
		System.out.println ("ripristinata");
	}
	public void windowClosing (WindowEvent e) {
		System.out.println ("chiusa");
	}
}
public class provaAscltatoreFinestraEsterno {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Eventi finestra" data-href="Eventi finestra" href="java\grafica\eventi-finestra.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\gestione-degli-eventi-della-finestra-con-classe-ascoltatore-esterna.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Gestione degli eventi della finestra con classe ascoltatore esterna.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Gestione degli eventi della finestra con classe ascoltatore interno]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.event.*;
class Finestra extends JFrame {
	public Finestra () {
		super ("Finestra");
		setBounds (200, 200, 200,200);
		addWindowListener (new Finestra.AscoltatoreFinestra());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	class AscoltatoreFinestra implements WindowListener {
		public void windowOpened (WindowEvent e) {
			System.out.println ("aperta");
		}
		public void windowClosed (WindowEvent e) {
			System.out.println ("eliminata");
		}
		public void windowActivated (WindowEvent e) {
			System.out.println ("attivata");
		}
		public void windowDeactivated (WindowEvent e) {
			System.out.println ("disattivata");
		}
		public void windowIconified (WindowEvent e) {
			System.out.println ("ridotta a icona");
		}
		public void windowDeiconified (WindowEvent e) {
			System.out.println ("ripristinata");
		}
		public void windowClosing (WindowEvent e) {
			System.out.println ("chiusa");
		}
	}
}
public class provaAscltatoreFinestraInterno {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Eventi finestra" data-href="Eventi finestra" href="java\grafica\eventi-finestra.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\gestione-degli-eventi-della-finestra-con-classe-ascoltatore-interno.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Gestione degli eventi della finestra con classe ascoltatore interno.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Gestione degli eventi della finestra con l'ascoltatore realizzato come classe interna che estende la classe adattatore WindowAdapter]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.event.*;
class Finestra extends JFrame {
	public Finestra () {
		super ("Finestra");
		setSize (200,200);
		addWindowListener (new Finestra.AscoltatoreChiusura ());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	class AscoltatoreChiusura extends WindowAdapter {
		public void windowClosing (WindowEvent e) {
			System.out.println ("chiusa");
		}
	}
}
public class provaWindowAdpaterInterno {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Eventi finestra" data-href="Eventi finestra" href="java\grafica\eventi-finestra.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\gestione-degli-eventi-della-finestra-con-l&apos;ascoltatore-realizzato-come-classe-interna-che-estende-la-classe-adattatore-windowadapter.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Gestione degli eventi della finestra con l&apos;ascoltatore realizzato come classe interna che estende la classe adattatore WindowAdapter.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Somma di numeri inseriti in una casella di testo con risultato visualizzato in un'altra casella di testo]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class Finestra extends JFrame {
	private JTextField casella1;
	private JTextField casella2;
	private int somma = 0;
	public Finestra () {
		setSize (400, 200);
		setTitle ("Finestra");
		casella1 = new JTextField ();
		casella1.addActionListener (new GestoreCasella ());
		casella2 = new JTextField ();
		casella2.setEditable (false);
		Container sfondo = getContentPane ();
		sfondo.add (casella1, "North");
		sfondo.add (casella2, "South");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		setVisible (true);
	}
	class GestoreCasella implements ActionListener {
		public void actionPerformed (ActionEvent e) {
			int numero = Integer.parseInt (casella1.getText ());
			casella1.setText (""); 
			somma = somma + numero;
			casella2.setText(somma + " ");
		}
	}
}
public class ProvaJTextField {
	public static void main (String [] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="JTextField" data-href="JTextField" href="java\grafica\jtextfield.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\somma-di-numeri-inseriti-in-una-casella-di-testo-con-risultato-visualizzato-in-un&apos;altra-casella-di-testo.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Somma di numeri inseriti in una casella di testo con risultato visualizzato in un&apos;altra casella di testo.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Testo in un'area di testo e quando si preme il pulsante leggi si stampa il testo nella finestra dei comandi]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class Finestra extends JFrame {
	private JTextArea area;
	public Finestra () {
		setSize (400, 200);
		setTitle ("Finestra");
		area = new JTextArea (10, 20);
		area.setLineWrap (true);
		JButton pulsante = new JButton ("Leggi");
		pulsante.addActionListener (new GestorePulsante ());
		Container sfondo = getContentPane ();
		sfondo.add (area, "Center");
		sfondo.add (pulsante, "South");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		setVisible (true);
	}
	class GestorePulsante implements ActionListener {
		public void actionPerformed (ActionEvent e) {
			String testo = area.getText ();
			System.out.println (testo);
		}
	}
}
public class ProvaJTextArea {
	public static void main (String [] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="JTextArea" data-href="JTextArea" href="java\grafica\jtextarea.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\grafica\esempi\testo-in-un&apos;area-di-testo-e-quando-si-preme-il-pulsante-leggi-si-stampa-il-testo-nella-finestra-dei-comandi.html</link><guid isPermaLink="false">Java/Grafica/Esempi/Testo in un&apos;area di testo e quando si preme il pulsante leggi si stampa il testo nella finestra dei comandi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Altri componenti e creazione di componenti personalizzati]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Altri comuni componenti swing sono:

<br>JColorChooser finestra di dialogo per la scelta di un colore;
<br>JFileChooser finestra di dialogo per la scelta di un file;
<br>JList elenco di voci;
<br>JPopupMenu menu a comparsa;
<br>JProgressBar barra che mostra l'avanzamento come percentuale della lunghezza della barra;
<br>JSlider controllo a cursore;
<br>JTable tabella con celle di testo o grafica;
<br>JToolBar barra degli strumenti;
<br>JTree visualizza dati gerarchici organizzandoli ad albero.


<br>I componenti disponibili si possono estendere e combinare per creare componenti personalizzati.
<br>Per esempio: la creazione di un pulsante per colorare lo sfondo di un componente, estendendo la classe JButton. Dopo aver definito una classe apposita, basta creare il pulsante passandogli la scritta che deve comparire, il colore che deve gestire e il riferimento al componente
<br>import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class PulsanteColore extends JButton implements ActionListener {
	private Color colore;
	private Component componente;
	public PulsanteColore (String etichetta, Color colore, Component componente) {
		super (etichetta);
		this.colore = colore;
		this.componente = componente;
		addActionListener (this);
	}
	public void actionPerformed (ActionEvent e) {
		componente.setBackground (colore);
	}
}

class Finestra extends JFrame {
	private Container sfondo;
	public Finestra () {
		setSize (400, 200);
		setTitle ("Finestra");
		sfondo = getContentPane ();
		PulsanteColore pulsante1 = new PulsanteColore ("Rosso", Color.red, sfondo);
		PulsanteColore pulsante2 = new PulsanteColore ("Verde", Color.green, sfondo);
		PulsanteColore pulsante3 = new PulsanteColore ("Blu", Color.blue, sfondo);
		PulsanteColore pulsante4 = new PulsanteColore ("Bianco", Color.white, sfondo);
		sfondo.add (pulsante1, "East");
		sfondo.add (pulsante2, "West");
		sfondo.add (pulsante3, "North");
		sfondo.add (pulsante4, "South");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		setVisible(true);
	}
}

public class ProvaPulsanteColore {
	public static void main (String [] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a>]]></description><link>java\grafica\altri-componenti-e-creazione-di-componenti-personalizzati.html</link><guid isPermaLink="false">Java/Grafica/Altri componenti e creazione di componenti personalizzati.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[BorderLayout]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>BorderLayout (disposizione a zone) divide il contenitore in cinque zone, i margini nord, sud, ovest, est e l'area centrale che occupa tutto lo spazio libero (se non ci sono componenti nelle altre zone occupa anche quelle). I componenti vengono inseriti indicando una zona specifica come secondo parametro del metodo add (); se non si specifica la zona, il componente viene aggiunto per default alla zona centrale.  Component add (Component comp, Object constraints) inserisce il componente alla posizione specificata.
<br>Per specificare la posizione si può usare una delle costanti o stringhe:
<br>BorderLayout. NORTH //North
BorderLayout.SOUTH //South
BorderLayout.EAST //East
BorderLayout. WEST //West
BorderLayout.CENTER //Center
Copy<br>
<br>In ogni zona può essere inserito un solo componente; se si inseriscono più componenti in una zona, risultano sovrapposti. Ogni componente viene ridimensionato in modo da adattarsi alla zona, occupando tutto lo spazio disponibile.
<br>BorderLayout è il gestore di layout predefinito per tutte le finestre (e i pannelli dei contenuti all'interno di JFrame).
<br>import javax.swing.*;
import java.awt.*;
class Finestra extends JFrame {
	public Finestra () {
		setSize (300, 300);
		setTitle ("Finestra");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		Container sfondo = getContentPane ();
		sfondo.add (new JButton ("North"), "North");
		sfondo.add (new JButton ("South"), "South");
		sfondo.add (new JButton ("East"), "East");
		sfondo.add (new JButton ("West"), "West");
		sfondo.add (new JButton ("Center"), "Center");
		setVisible (true);
	}
}
public class ProvaBorderLayout {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\borderlayout.html</link><guid isPermaLink="false">Java/Grafica/BorderLayout.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Bordi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>A tutti i componenti swing si può applicare un bordo usando il metodo setBorder() della classe JComponent.
<br>void setBorder (Border border) applica un bordo, oggetto di tipo Border.<br>
<br>Di solito i bordi si applicano ai pannelli. I bordi sono oggetti di classi che implementano l'interfaccia Border(del package javax.swing.border); la classe AbstractBorder implementa l'interfaccia ed è la superclasse di tutti i bordi.
<br>Tipi principali di bordi:

<br>EtchedBorder bordo inciso di cui si può specificare il colore e se deve apparire incavato o in rilievo;
<br>LineBorder bordo costituito da una linea di cui si può specificare spessore e colore;
<br>TitledBorder bordo con un titolo; si può applicare un titolo a un bordo di un altro tipo usando il costruttore TitledBorder(Border border, String title).


<br>import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
class Finestra extends JFrame {
	public Finestra () {
		setSize (300,300);
		setTitle ("Finestra");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		Container sfondo = getContentPane ();
		JPanel pannello = new JPanel ();
		pannello.setLayout (new GridLayout (4,1));
		JPanel p1 = new Jpanel();
		p1.setBorder (new EtchedBorder ());
		pannello.add (p1);
		JPanel p2 = new JPanel ();
		p2.setBorder (new LineBorder (Color.red, 5));
		pannello.add (p2);
		JPanel p3 = new JPanel ();
		p3.setBorder (new TitledBorder ("Titolo"));
		pannello.add (p3);
		JPanel p4 = new JPanel ();
		p4.setBorder (new TitledBorder (new EtchedBorder (),"Titolo"));
		pannello.add (p4);
		sfondo.add (pannello);
		setVisible (true);
	} 
}
public class ProvaBordi {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\bordi.html</link><guid isPermaLink="false">Java/Grafica/Bordi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Caselle combinate]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Le caselle combinate sono oggetti della classe JComboBox (presentano una freccetta su cui fare clic per vedere le opzioni disponibili).
<br>I costruttori usati più comunemente sono:

<br>JComboBox () crea una casella combinata senza voci;
<br>JComboBox (Object [] items) crea una casella combinata con le voci dell'array;
<br>JComboBox (Vector items) crea una casella combinata con le voci del vettore.


<br>I metodi principali sono:

<br>void addItem (Object anObject) aggiunge una voce alla casella combinata;
<br>int getItemCount () restituisce il numero di voci nella lista;
<br>Object getSelectedItem () restituisce la voce selezionata (un Object che poi va convertito nel tipo desiderato, per esempio String, con un cast);
<br>void setEditable (boolean aFlag) permette di stabilire se l'utente può digitare nel campo della casella;
<br>void setMaximumRowCount (int Count) stabilisce il numero di voci da visualizzare (se le voci sono di più viene aggiunta una barra di scorrimento);
<br>void setSelectedItem (Object anObject) permette di selezionare una voce.


<br>Caselle di controllo, pulsanti di selezione e caselle combinate generano un evento azione (ActionEveni) ogni volta che l'utente seleziona un elemento; per gestire l'evento bisogna installare un ascoltatore di eventi che implementi l'interfaccia ActionListener, registrandolo in ogni casella di controllo, pulsante di selezione o casella combinata. Se necessario, nel gestore degli eventi è possibile usare il metodo getSource () di EventObject per individuare l'origine dell'evento.
<br>Programmi associati:<br>
<a data-href="Esempio di caselle combinate, pulsanti di selezione e caselle di controllo" href="java\grafica\esempi\esempio-di-caselle-combinate,-pulsanti-di-selezione-e-caselle-di-controllo.html" class="internal-link" target="_self" rel="noopener">Esempio di caselle combinate, pulsanti di selezione e caselle di controllo</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a>  ]]></description><link>java\grafica\caselle-combinate.html</link><guid isPermaLink="false">Java/Grafica/Caselle combinate.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Caselle di controllo e pulsanti di selezione]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Le caselle di controllo sono oggetti della classe JCheckBox.
<br>I costruttori usati più comunemente sono:

<br>JcheckBox() crea una casella di testo;
<br>JCheckBox (String text) crea una casella di controllo con il testo associato;
<br>JCheckBox (String text, boolean selected) crea una casella di controllo selezionata con il testo associato.


<br>I metodi più utili sono ereditati dalla classe AbstractButton:

<br>boolean isSelected () permette di verificare se la casella è selezionata;
<br>void setSelected (boolean b) permette di selezionare (true) o deselezionare (false) la casella.


<br>I pulsanti di selezione sono oggetti della classe JRadioButton.
<br>I costruttori usati più comunemente sono:

<br>JradioButton () crea un pulsante di selezione;
<br>JRadioButton (String text ) crea un pulsante di selezione con il testo associato;
<br>JRadioButton (String text, boolean selected) crea un pulsante di selezione selezionato con il testo associato.


<br>I metodi più utili sono ereditati dalla classe AbstractButton:

<br>boolean isSelected () permette di verificare se il pulsante è salezionato;
<br>void setSelected (boolean b) permette di selezionare (true) o deselezionare (false) il pulsante.


<br>Per creare un gruppo di pulsanti di selezione, in modo che uno solo dei pulsanti del gruppo possa essere selezionato, bisogna inserire i pulsanti in un oggetto ButtonGroup, col metodo add () (i pulsanti però vanno posizionati nel contenitore singolarmente; per evidenziare che si tratta di un gruppo si può aggiungere un bordo).
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\caselle-di-controllo-e-pulsanti-di-selezione.html</link><guid isPermaLink="false">Java/Grafica/Caselle di controllo e pulsanti di selezione.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Caselle e aree di testo]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Caselle e aree di testo permettono l'inserimento di ínput da parte dell'utente.
<br>Per chiedere testo all'utente si può usare anche il metodo statico showInputDialog () della classe JOptionPane.
<br>Le caselle di testo sono oggetti della classe JTextField mentre le aree di testo sono oggetti della classe JtextArea. Le classi JTextFied e JTextArea sono sottoclassi della classe JTextComponent. I metodi principali di JTextComponent, e quindi ereditati dalle due sottoclassi sono:

<br>String getText () restituisce il testo inserito;
<br>void setText (String text) imposta il testo;
<br>void setEditable (boolean b) specifica se l'utente può modificare il testo;
<br>String getSelectedText () restituisce il testo selezionato;
<br>int getSelectionStart () restituisce la posizione iniziale del testo selezionato;
<br>int getSelectionEnd () restituisce la posizione finale del testo selezionato;
<br>void setSelectionStart (int selectionStart) imposta la posizione iniziale del testo selezionato;
<br>void setSelectionEnd (int selectionEnd) posta laposizione finale del testo selezionato.


<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\caselle-e-aree-di-testo.html</link><guid isPermaLink="false">Java/Grafica/Caselle e aree di testo.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Componenti e Contenitori]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Ogni elemento in una finestra (compresa la finestra) è un componente awt o swing.
<br>I componenti awt si suddividono in componenti semplici e in contenitori. I componenti sono tutti sottoclassi della classe Component che deriva direttamente da Object, sono oggetti come pulsanti (Button), etichette (Label), caselle di testo (TextField) e così via. I contenitori sono sottoclassi di Container, che è una delle sottoclassi di Component, i contenitori sono componenti che possono contenere altri componenti; sono oggetti come finestre (Window, Dialog e Frame) o pannelli (Panel).
<br>La classe Canvas assomiglia a un contenitore ma non può essere usato per inserirvi componenti; è un componente che rappresenta una sezione di una finestra usata come posto in cui disegnare oggetti grafici o visualizzare immagini. Per disegnare sul canvas si ridefinisce il metodo paint (Graphics g) della classe Canvas. In swing al posto di Canvas si può usare un JPanel.
<br>I componenti swing sono tutti anche contenitori. Le finestre (JWindow, JDialog e JFrame) sono sottoclassi delle corrispondenti classi awt, tutti gli altri componenti, compreso JPanel, sono sottoclassi di JComponent, che a sua volta è una sottoclasse di Container.
<br>La classe Component è la superclasse di tutti i componenti, sia awt che swing, e ha metodi per lavorare con aspetto (dimensione, colore, font ecc.) e gestori di eventi del componente.
<br>La classe Component ha il metodo paint () che può essere usato per disegnare sul componente. Un componente può ridefinire il metodo paint () per disegnare sulla sua superficie.
<br>public class MioComponente extends Component {
	public void paint (Graphics g) { ... }
}
Copy<br>
<br>Tutte le istruzioni per il disegno devono essere contenute nel metodo paint (). II metodo paint () riceve come parametro un oggetto della classe Graphics che rappresenta lo sfondo del componente.
<br>Il metodo paint () viene richiamato automaticamente ogni volta che il componente deve essere visualizzato, cioè almeno una volta alla creazione del componente, e ogni volta che il componente viene spostato, ridimensionato o reso visibile dopo essere stato coperto. Peraggiornare il componente non si deve richiamare direttamente paint (), ma repaint (), che a sua volta chiama paint ().
<br>La classe Container, che definisce un contenitore, dispone di metodi per gestire i componenti che contiene e per impostare i layout che controllano disposizione e aspetto dei componenti presenti nel contenitore. Container è sottoclasse di Component e quindi i contenitori ereditano anche i metodi di Component.
<br>I componenti swing sono tutti sottoclassi di JComponent che è sottoclasse di Container. I componenti swing sono quindi tutti sia componenti che contenitori ed ereditano tutti i metodi di Container e di Component.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\componenti-e-contenitori.html</link><guid isPermaLink="false">Java/Grafica/Componenti e Contenitori.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Contenitori]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>I contenitori sono componenti che possono contenere altri componenti.
<br>I contenitori sono tutti sottoclassi di Container.
<br>Le principali sottoclassi di Container sono:

<br>Windows uperclasse di tutte le finestre di applicazione (Frame e JFrame) e delle finestre di dialogo (Dialog e
<br>JDialog);
<br>Panel contenitore generico;
<br>ScrollPane pannello dotato di barre di scorrimento: può contenere componenti più grandi del contenitore;
<br>JComponent superclasse di tutti i componenti swing.


<br>I contenitori principali che estendono JComponent sono:

<br>JPanel contenitore di tipo semplice per contenere altri pannelli o componenti;
<br>JTabbedPane pannello a schede multiple;
<br>JScrollPane pannello a scorrimento;
<br>JOptionPane supporta numerose finestre di dialogo comuni.


<br>In una applicazione con interfaccia grafica bisogna per prima cosa avere un contenitore per inserirvi dei componenti.In una applicazione bisogna per prima cosa creare una finestra, di solito un oggetto Frame o JFrame (sottoclassi di Window).
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\contenitori.html</link><guid isPermaLink="false">Java/Grafica/Contenitori.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Costruire un programma con interfaccia grafica]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>La realizzazione di una applicazione con interfaccia grafica deve essere organizzata in tre fasi:

<br>creazione dell'interfaccia utente, suddivisa in:

<br>definizione degli oggetti, cioè creazione delle finestre e di tutti gli altri controlli visibili e non (come caselle di testo, pulsanti, etichette, barre dei menu);
<br>descrizione degli oggetti, cioè disposizione dei controlli e impostazione delle loro proprietà (come dimensione, colore, aspetto);


<br>individuazione delle relazioni tra oggetti: si devono capire le relazioni che intercorrono tra i vari controlli che compongono il progetto e gli eventi che vengono generati, cioè cosa succede a determinati oggetti quando si verificano eventi, anche su altri oggetti; Un esempio di relazione: il clic del mouse (evento) su un pulsante (primo oggetto) provoca un cambio di proprietà su una casella di testo (secondo oggetto).
<br>scrittura del codice: si deve scrivere il codice da eseguire come risposta agli eventi.


<br>Queste fasi, naturalmente, sono dipendenti l'una all'altra. Per esempio nella fase di individuazione delle relazioni tra oggetti si verifica se i controlli creati nella fase precedente sono sufficienti e idonei; in caso contrario si devono creare nuovi controlli.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\costruire-un-programma-con-interfaccia-grafica.html</link><guid isPermaLink="false">Java/Grafica/Costruire un programma con interfaccia grafica.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Etichette]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Le etichette sono oggetti della classe JLabel.
<br>COSTRUTTORI PRINCIPALI

<br>JLabel () crea un'etichetta vuota;
<br>JLabel (String text) crea un'etichetta con il testo specificato;
<br>JLabel (String text, int horizontalAlignment) crea un'etichetta con il testo e l'allineamento specificati; per specificare l'allineamento si può usare una delle costanti SwingConstants.LEFT, SwingConstants.CENTER o SwingConstants.RIGHT.


<br>METODI PRINCIPALI

<br>void setHorizontalAlignment (int alignment) imposta l'allineamento orizzontale dell'etichetta (SwingConstants.LEFT, SwingConstants.CENTER o SwingConstants.RIGHT);
<br>void setText (string text) imposta il testo dell'etichetta;
<br>void setVerticalAlignment (int alignment) imposta l'allineamento verticale dell'etichetta (SwingConstants.TOP, SwingConstants.CENTER o SwingConstants.BOTTOM).


<br>import javax.swing.*;
import java.awt.*;
class Finestra extends JFrame {
	public Finestra () {
		setSize (200,200);
		setTitle ("Finestra");
		JLabel label = new JLabel ("Ciao a tutti", SwingConstants.CENTER);
		Container sfondo = getContentPane ();
		sfondo.add (label);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		setVisible (true);
	}
}
public class ProvaJLabel {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\etichette.html</link><guid isPermaLink="false">Java/Grafica/Etichette.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Eventi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Ogni evento che può essere generato è descritto da una classe. Ogni volta che viene generato un evento viene creato un oggetto della classe corrispondente.
<br>Tutte le classi degli eventi sono sottoclassi della classe EventObject (del package java.util). La maggior parte degli eventi relativi all'interfaccia grafica sono definiti nel package java.awt.event e sono sottoclassi di AWTEvent (del package java.awt), che a sua volta è sottoclasse di EventObject.
<br>La classe EventObject fornisce il metodo getSource () che permette di conoscere l'oggetto che ha generato l'evento. Object getSource () restituisce l'oggetto che ha generato l'evento.
<br>Le sottoclassi di EventObject, in base al tipo di evento, offrono ulteriori metodi specifici per ottenere informazioni sull'evento. La classe ComponentEvent relativa a tutti gli eventi a livello di componente grafico fornisce il metodo getComponent () che individua il componente che ha generato l'evento.
<br>La classe WindowEvent relativa agli eventi delle finestre fornisce il metodo getWindow () che individua la finestra origine dell'evento.
<br>Gerarchia delle classi evento più comuni:
<br>EventObject
	AWTEvent
		ActionEvent
		ComponentEvent
			FocusEvent
			InputEvent
				KeyEvent
				MouseEvent
			WindowEvent
		TextEvent
Copy<br>
<br>Eventi comuni:
<br>ActionEvent //evento che richiede che un componente dell'interfaccia esegua un'azione (generato per esempio da un clic su un pulsante o dalla selezione di una voce di menu);
FocusEvent //evento generato dall'attivazione o disattivazione di un componente (cambiamento di stato o focus);
KeyEvent //eventi generati dalla tastiera;
MouseEvent //eventi generati dal mouse;
WindowEvent //eventi relativi alle finestre.
Copy<br>
<br>Gli eventi si possono pensare suddivisi in due tipi: eventi di basso livello ed eventi di semantica. Gli eventi di basso livello si occupano dell'input dell'utente o degli eventi relativi alle finestre; sono eventi di basso livello quelli che derivano da ComponentEvent (FocusEvent, KeyEvent, MouseEvent e WindowEvent). Gli eventi di semantica si occupano del significato dell'azione; è un evento di semantica ActionEvent.
<br>Un clic del mouse, che è un evento di basso livello, diventa un evento di semantica quando viene utilizzato per richiedere un'azione per esempio tramite un pulsante.
<br>Gli eventi che si verificano vengono inseriti in una coda rappresentata da un oggetto della classe EventQueue (del package java.awt); si può usare questa coda per conoscere in anticipo gli eventi o per inserire nella coda nuovi eventi.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\eventi.html</link><guid isPermaLink="false">Java/Grafica/Eventi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Eventi del mouse - classe ascoltatore esterna]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Per intercettare gli eventi del mouse bisogna:

<br>creare una classe ascoltatore per gli eventi del mouse, cioè una classe che implementa l'interfaccia MouseListener;
<br>registrare un oggetto della classe ascoltatore nell'oggetto origine con il metodo addMouseListener ().


<br>Le classi coinvolte nella gestione degli eventi del mouse sono:

<br>la classe origine, cioè il componente che genera l'evento e registra l'ascoltatore;
<br>la classe ascoltatore che implementa l'interfaccia MouseListener;
<br>la classe MouseEvent relativa agli eventi del mouse.


<br>L'interfaccia MouseListener ha un metodo per ogni specifico evento generato dal mouse:  
<br>void mouseClicked (MouseEvent e) //clic del mouse (pulsante premuto e rilasciato);
void mouseEntered (MouseEvent e) //entrata del mouse;
void mouseExited (MouseEvent e) //uscita del mouse;
void mousePressed (MouseEvent e) //pulsante premuto;
void mouseReleased (MouseEvent e) //pulsante rilasciato.
Copy<br>
<br>Ogni metodo ha un parametro MouseEvent. MouseEvent, come tutte le classi evento, è una sottoclasse di EventObject e quindi eredita il metodo getSource() che permette di ottenere l'oggetto che ha generato l'evento. MouseEvent ha anche metodi specifici per ottenere ulteriori informazioni sull'evento generato, tra cui getX () e getY () che forniscono le coordinate x e y della posizione del mouse nel momento in cui si è verificato l'evento.
<br>int getX () //restituisce la coordinata x della posizione del mouse;
int getY () //restituisce la coordinata y della posizione del mouse.
Copy<br>
<br>Gestione degli eventi del mouse in una finestra di una applicazione. L'origine degli eventi è la finestra dell'applicazione; quindi l'ascoltatore degli eventi del mouse deve essere registrato nella finestra stessa. L'applicazione controlla gli eventi del mouse e stampa un messaggio per ogni evento che si verifica con la causa dell'evento e, per alcuni eventi, le coordinate della posizione del puntatore del mouse.
<br>Si noti che se si preme il pulsante del mouse e lo si sposta prima di rilasciarlo si verificano gli eventi MousePressed e MouseReleased ma non l'evento MouseClicked: l'evento MouseClicked si verifica solo se la pressione e il rilascio avvengono esattamente nello stesso punto.
<br>Il fatto che la classe origine e la classe ascoltatore siano due classi separate qualche volta può essere un problema.
<br>In pratica la classe ascoltatore deve poter accedere a uno o più attributi della classe origine: per consentire ciò bisogna passare l'oggetto origine come parametro al costruttore dell'ascoltatore, per potervi fare riferimento, e non si possono dichiarare privati gli attributi della classe dell'oggetto origine.
<br>Applicazione che visualizza una finestra di dialogo con le coordinate del punto in cui è stato fatto clic. Nell'applicazione sono definite come attributi le coordinate del punto da visualizzare; inoltre è definito il metodo che visualizza la finestra di dialogo: l'ascoltatore deve accedere agli attributi per impostarli con i valori relativi alla posizione del mouse nel momento in cui si verifica l'evento e al metodo per richiamarlo.
<br>Programmi associati:<br>
<a data-href="Esempio 1" href="java\grafica\esempi\esempio-1.html" class="internal-link" target="_self" rel="noopener">Esempio 1</a><br>
<a data-href="Esempio 2" href="java\grafica\esempi\esempio-2.html" class="internal-link" target="_self" rel="noopener">Esempio 2</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\eventi-del-mouse-classe-ascoltatore-esterna.html</link><guid isPermaLink="false">Java/Grafica/Eventi del mouse - classe ascoltatore esterna.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Eventi del mouse - classe ascoltatore interna]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Spesso conviene definire la classe ascoltatore come interna alla classe dell'oggetto origine, infatti ai metodi della classe interna è consentito accedere agli attributi privati della classe esterna.
<br>import javax.swing.*;
import java.awt.event.*;

class Finestra extends JFrame {
	Finestra () {
		super ("ascoltatore Mouse Interno");
		setSize (200, 200);
		addMouseListener (new Finestra.AscoltatoreMouse ());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	class AscoltatoreMouse implements MouseListener {
		public void mouseClicked (MouseEvent e) {
			System.out.println ("click in " + e.getX () + ", " + e.getY ());
			JOptionPane.showMessageDialog (null, "posizione click: " + e.getX () + ", " + e.getY ());
		}
		public void mouseEntered (MouseEvent e) {
			System.out.println ("mouse dentro");
		}
		public void mouseExited (MouseEvent e) {
			System.out.println ("mouse fuori");
		}
		public void mousePressed (MouseEvent e) {
			System.out.println ("pulsante premuto in " + e.getX () + ", " + e.getY ());
		}
		public void mouseReleased (MouseEvent e) {
			System.out.println ("pulsante rilasciato in " + e.getX () + ", " + e.getY ());
		}
	}
}

public class ascoltatoreMouseInterno {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br>
<br>Il costruttore dell'applicazione costruisce un oggetto della classe interna e lo registra come ascoltatore; l'oggetto della classe interna si ricorda dell'oggetto che l'ha costruito: ogni volta che in un metodo della classe interna ci si riferisce a un attributo o a un metodo della classe esterna, l'oggetto della classe interna reperisce il riferimento all'oggetto che l'ha creato e quindi può accedere agli attributi e ai metodi di questo oggetto.
<br>Applicazione che visualizza una finestra di dialogo con le coordinate del punto in cui è stato fatto clic, con l'ascoltatore come classe interna. ● La classe interna può utilizzare gli attributi x e y della classe esterna e richiamarne il metodo visualizza ().
<br>La classe interna chiama un metodo visualizza() ma non ce l'ha; il metodo viene cercato e trovato nella classe esterna; il metodo viene invocato sull'oggetto classe esterna che ha creato l'oggetto classe interna.
<br>La compilazione per la classe interna crea il file Finestra$AscoltatoreMouse.class.
<br>import javax.swing.*;
import java.awt.event.*;

class Finestra extends JFrame {
	private int x;
	private int y;
	public Finestra () {
		super ("Finestra");
		setSize (200,200);
		addMouseListener (new Finestra.AscoltatoreMouse ());
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	public void visualizza() {
		JOptionPane.showMessageDialog (null, "clic del mouse nella posizione " + x + ", " + y);
	}
	class AscoltatoreMouse implements MouseListener {
		public void mouseClicked (MouseEvent e) {}
		public void mouseEntered (MouseEvent e) {}
		public void mouseExited (MouseEvent e) {}
		public void mousePressed (MouseEvent e) {
			x = e.getX ();
			y = e.getY ();
			visualizza ();
		}
		public void mouseReleased (MouseEvent e) {}
	}
}

public class ascoltatoreMouseInterno2 {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}

Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\eventi-del-mouse-classe-ascoltatore-interna.html</link><guid isPermaLink="false">Java/Grafica/Eventi del mouse - classe ascoltatore interna.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Eventi della tastiera]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Per intercettare gli eventi della tastiera bisogna:

<br>creare una classe ascoltatore per gli eventi della tastiera, cioè una classe che implementa l'interfaccia KeyListener;
<br>registrare un oggetto della classe ascoltatore nell'oggetto origine con il metodo addKeyListener ().


<br>Le classi coinvolte nella gestione degli eventi della tastiera sono:

<br>la classe origine, cioè il componente che genera l'evento e registra l'ascoltatore;
<br>la classe ascoltatore che implementa l'interfaccia KeyListener;
<br>la classe KeyEvent relativa agli eventi dlla tastiera.


<br>L'interfaccia KeyListener ha un metodo per ogni specifico evento generato dalla tastiera:
<br>void keyPressed (KeyEvent e) //tasto premuto;
void keyReleased (KeyEvent e) //tasto rilasciato;
void keyTyped (KeyEvent e) //tasto premuto e rilasciato.
Copy<br>
<br>Ogni metodo ha un parametro KeyEvent.
<br>Metodi utili specifici di KeyEvent sono:
<br>char getKeyChar () //restituisce il carattere Unicode associato al tasto premuto;
int getKeyCode () //restituisce il codice associato al tasto premuto; il codice può essere confrontato con le costanti definite nella classe KeyEvent; le costanti sono del tipo VK_0 ... VK_9 per le cifre da 0 a 9, VK_A ... VK_Z per le lettere dalla A alla Z, VK Fl_VK ... F12 per i tasti funzione da F1 a F12, VK_ENTER per il tasto Invio;
static String getKeyText (int keyCode) //restituisce una stringa che descrive il codice di un tasto.
Copy<br>
<br>Per gli eventi relativi alla tastiera è disponibile la classe adattatore KeyAdapter che implementa l'interfaccia KeyListener.<br>
Esempio:
<br>import javax.swing.*;
import java.awt.event.*;
class Finestra extends JFrame implements KeyListener {
	private String tasto;
	private int codice;
	public Finestra () {
		super ("Finestra");
		setSize (200,200);
		addKeyListener (this);
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	public void visualizza () {
		JOptionPane.showMessageDialog (null, "tasto: " + tasto + " codice: " + codice);
	}
	public void keyPressed (KeyEvent e) {
		codice = e.getKeyCode ();
		tasto = e.getKeyText (codice);
		visualizza ();
	}
	public void keyReleased (KeyEvent e) {}
	public void keyTyped (KeyEvent e) {}
}
public class provaKeyListener {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\eventi-della-tastiera.html</link><guid isPermaLink="false">Java/Grafica/Eventi della tastiera.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Eventi finestra]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Per intercettare gli eventi relativi a una finestra bisogna:

<br>creare una classe ascoltatore per gli eventi finestra, cioè una classe che implementa l'interfaccia WindowListener;
<br>registrare un oggetto della classe ascoltatore nella finestra origine con il metodo addWindowListener().


<br>Le classi coinvolte nella gestione degli eventi relativi alle finestre sono:

<br>la classe della finestra che genera l'evento e registra l'ascoltatore;
<br>la classe ascoltatore che implementa l'interfaccia WindowListener;
<br>la classe WindowEvent relativa agli eventi finestra.


<br>L'interfaccia WindowListener ha un metodo per ogni specifico evento finestra:
<br>void windowActivated (WindowEvent e) //attivata;
void windowClosed (WindowEvent e) //chiusa per effetto del metodo dispose();
void windowClosing (WindowEvent e) //chiusa dall'utente (con il pulsante sulla barra del titolo);
void windowDeactivated (WindowEvent e) //disattivata;
void windowDeiconified (WindowEvent e) //ripristinata (dopo essere stata ridotta a icona);
void windowIconified (WindowEvent e) //ridotta a icona (con il pulsante sulla barra del titolo);
void windowOpened (WindowEvent e) //aperta per la prima volta.
Copy<br>
<br>Ogni metodo ha un parametro WindowEvent.
<br>Per gli eventi finestra è disponibile la classe adattatore WindowAdapter che implementa l'interfaccia WindowListener, ridefinendone tutti i metodi in modo che non facciano nulla. Per creare un ascoltatore degli eventi finestra basta estendere la classe WindowAdapter e ridefinire solo i metodi relativi agli eventi che interessano.
<br>Programmi associati:<br>
<br><a data-href="Gestione degli eventi della finestra con classe ascoltatore esterna" href="java\grafica\esempi\gestione-degli-eventi-della-finestra-con-classe-ascoltatore-esterna.html" class="internal-link" target="_self" rel="noopener">Gestione degli eventi della finestra con classe ascoltatore esterna</a>
<br><a data-href="Gestione degli eventi della finestra con classe ascoltatore interno" href="java\grafica\esempi\gestione-degli-eventi-della-finestra-con-classe-ascoltatore-interno.html" class="internal-link" target="_self" rel="noopener">Gestione degli eventi della finestra con classe ascoltatore interno</a>
<br><a data-href="Gestione degli eventi della finestra con classe ascoltatore coincidente con la finestra stessa" href="java\grafica\esempi\gestione-degli-eventi-della-finestra-con-classe-ascoltatore-coincidente-con-la-finestra-stessa.html" class="internal-link" target="_self" rel="noopener">Gestione degli eventi della finestra con classe ascoltatore coincidente con la finestra stessa</a>
<br><a data-tooltip-position="top" aria-label="Gestione degli eventi della finestra con l'ascoltatore realizzato come classe interna che estende la classe adattatore WindowAdapter" data-href="Gestione degli eventi della finestra con l'ascoltatore realizzato come classe interna che estende la classe adattatore WindowAdapter" href="java\grafica\esempi\gestione-degli-eventi-della-finestra-con-l'ascoltatore-realizzato-come-classe-interna-che-estende-la-classe-adattatore-windowadapter.html" class="internal-link" target="_self" rel="noopener">Gestione degli eventi della finestra con l'ascoltatore realizzato come classe interna che estende la classe adattatore WindowAdapter</a>
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\eventi-finestra.html</link><guid isPermaLink="false">Java/Grafica/Eventi finestra.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:36:26 GMT</pubDate></item><item><title><![CDATA[Eventi sui componenti - ActionEvent]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>La maggior parte dei componenti genera eventi di azione per segnalare che è avvenuto qualcosa: clic sul pulsante, selezione di una casella, clic su una voce di un elenco, Invio in un campo di testo.
<br>Per intercettare gli eventi di azione bisogna:

<br>creare una classe ascoltatore per gli eventi azione, cioè una classe che implementa l'interfaccia ActionListener,
<br>registrare un oggetto della classe ascoltatore nell'oggetto origine con il metodo addActionListener().


<br>Le classi coinvolte nella gestione degli eventi azione sono:

<br>la classe origine cioè il componente che genera l'evento e che registra l'ascoltatore;
<br>la classe ascoltatore che implementa l'interfaccia ActionListener
<br>la classe ActionEvent relativa agli eventi azione.


<br>L'interfaccia ActionListener ha un solo metodo: void actionPerformed (ActionEvent e) richiamato ogni volta che si verifica un evento azione.
<br>Il metodo ha un parametro ActionEvent. ActionEvent, come tutte le classi evento, è una sottoclasse di EventObject e quindi eredita il metodo getSource () che permette di individuare quale componente ha generato l'evento.
<br>public void actionPerformed (ActionEvent e) {
	if (e.getSource () instanceof JButton) {
		if (e.getSource() == pulsantel ) {
			//istruzioni
		}
	}
}
Copy<br>
<br>Usando i metodi getSource () e getActionCommand () si può realizzare un unico ascoltatore di eventi per più eventi azione anche di componenti diversi.
<br>ActionEvent ha anche il metodo getActionCommand () che restituisce il comando associato con l'azione (per esempio la scritta sul pulsante o nella voce di menu).
<br>String getActionCommand () //restituisce la stringa che identifica il comando.
Copy<br>
<br>Un componente può ricevere gli eventi della tastiera ma soltanto se ha il focus (cioè se è il componente attivo della finestra attiva). Un componente può richiedere il focus richiamando il metodo requestFocus (). Un componente può ottenere il focus anche in seguito a un'azione dell'utente come un clic del mouse sul componente o l'uso dei tasti di tabulazione (che spostano il focus da un componente all'altro in successione).
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\eventi-sui-componenti-actionevent.html</link><guid isPermaLink="false">Java/Grafica/Eventi sui componenti - ActionEvent.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Finestre]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Un programma grafico utilizza sempre una o più finestre. Una applicazione deve per prima cosa creare una finestra.
<br>Le finestre sono tutte sottoclassi di Window.
<br>Window
	Dialog
		JDialog
	Frame
		JFrame
	JWindow
Copy<br>
<br>Le classi finestra di awt sono:

<br>Window rappresenta una finestra senza barra del titolo o bordo;
<br>Frame è la base per le finestre delle applicazioni;
<br>Dialog è la base per le finestre di dialogo.


<br>Le classi finestra di swing sono:

<br>JWindow rappresenta una finestra senza barra del titolo o bordo;
<br>JFrame è la base per le finestre delle applicazioni;
<br>JDialog è la base per le finestre di dialogo.


<br>JWindow, JFrame e JDialog estendono le classi corrispondenti di awt e differiscono dalle finestre awt perché usano un pannello del contenuto separato per l'aggiunta e la disposizione dei componenti; il pannello del contenuto è un oggetto Container a cui si accede con il metodo getContentPane ().
<br>Tutte le finestre quando vengono create hanno dimensione 0x0 e sono invisibili. Per impostare la dimensione e rendere visibile la finestra si possono usare i metodi ereditati dalla classe Component:
<br>void setSize (int width, int height)//imposta la dimensione;
void setLocation (int x, int y) //imposta la posizione;
void setBounds (int x, int y, int width, int height) //imposta la posizione e la dimensione;
void setVisible (boolean b) //visualizza la finestra se il parametro è true, la nasconde se il parametro è false.
Copy<br>
<br>Si possono usare anche i metodi di Window show () e hide ().
<br>Altri metodi utili ereditati da Component sono:
<br>void setBackground (Color c) //imposta il colore di sfondo;
void setForeground (Color c) //imposta il colore di primo piano;
void setCursor (Cursor cursor) //imposta l'immagine del cursore da usare.
Copy<br>
<br>Metodi utili della classe Window (e quindi utilizzabili da tutte le finestre) sono:
<br>void dispose () //elimina la finestra rilasciando tutte le risorse;
void pack () //modifica le dimensioni della finestra per adattarle esattamente al suo contenuto;
void toBack () //porta la finestra in secondo piano e la disattiva;
void toFront () //porta la finestra in primo piano e la rende attiva;
void setAlwaysOnTop () //mantiene la finestra sempre in primo piano.
Copy<br>
<br>Una finestra della classe Window non ha bordo né menu. Di solito non si usano direttamente finestre di tipo Window ma finestre di applicazione o finestre di dialogo.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\finestre.html</link><guid isPermaLink="false">Java/Grafica/Finestre.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Finestre di applicazione]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Tutte le finestre quando vengono create hanno dimensione 0x0 e sono invisibili. Per impostare la dimensione e rendere visibile la finestra si possono usare i metodi ereditati dalla classe Component:
<br>void setSize (int width, int height); //imposta la dimensione
void setLocation (int x, int y); //imposta la posizione
void setBounds (int x, int y, int width, int height); //imposta la posizione e la dimensione
void setVisible (boolean b); //visualizza la finestra se il parametro è true, la nasconde se il parametro è false
Copy<br>
<br>Si possono usare anche i metodi di Window show () e hide ().
<br>Altri metodi utili ereditati da Component sono:
<br>void setBackground (Color c); //imposta il colore di sfondo
void setForeground (Color c); //imposta il colore di primo piano
void setCursor (Cursor cursor); //imposta l'immagine del cursore da usare
Copy<br>
<br>Metodi utili della classe Window (e quindi utilizzabili da tutte le finestre) sono:
<br>void dispose (); //elimina la finestra rilasciando tutte le risorse
void pack (); //modifica le dimensioni della finestra per adattarle esattamente al suo contenuto
void toBack (); //porta la finestra in secondo piano e la disattiva
void toFront (); //porta la finestra in primo piano e la rende attiva
void setAlwaysOnTop (); //mantiene la finestra sempre in primo piano
Copy<br>
<br>Una finestra della classe Window non ha bordo né menu. Di solito non si usano direttamente finestre di tipo Window ma finestre di applicazione o finestre di dialogo.
<br>Di solito per creare una finestra di una applicazione si parte dalla classe awt Frame o meglio dalla classe swing JFrame che la estende.
<br>JFrame (e anche Frame) è una finestra di livello principale, ha un bordo (che si può trascinare per modificare le dimensioni) e una barra del titolo. Può avere un menu perché implementa l'interfaccia MenuContainer.
<br>Per creare un JFrame (o in modo analogo un Frame) si può usare il costruttore senza parametri o un costruttore che permette di specificare il titolo della finestra.
<br>JFrame(); //costruisce una finestra
JFrame(String title); //costruisce una finestra con il titolo specificato
Copy<br>
<br>Per modificare alcune proprietà della finestra si possono utilizzare i metodi della classe Frame, ereditati da Jframe:
<br>void setIconImage(Image image); //imposta l'immagine dell'icona da usare quando la finestra è ridotta a icona
void setMenuBar (MenuBar mb); //imposta la barra dei menu
void setResizable(boolean resizable); //determina se la finestra può essere ridimensionata
void setTitle (String title); //imposta il titolo della finestra
Copy<br>
<br>Per aprire una finestra di applicazione si crea un oggetto JFrame (o Frame), si impostano le proprietà e si aggiungono alla finestra tutti i componenti necessari, e poi si richiama setVisible (true).
<br>Per chiudere una finestra si deve usare il metodo dispose () o richiamare System.exit (0) che fa terminare anche l'applicazione. Queste istruzioni non vanno inserite alla fine del main (), altrimenti la finestra sparisce subito, ma vanno chiamate al momento opportuno, per esempio quando si fa clic sul pulsante di chiusura nella barra del titolo.
<br>La classe JFrame risponde in modo automatico al clic sul pulsante di chiusura della finestra, nascondendo la finestra. Non viene automaticamente chiusa l'applicazione perché il programma potrebbe avere più finestre e non dover uscire quando se ne chiude una. Si può modificare la risposta al clic sull'icona di chiusura con il metodo void setDefaultaoseOperation (int operation) che imposta la risposta al clic sull'icona di chiusura. Il valore del parametro può essere una delle costanti:
<br>EXIT_ON_CLOSE //definita nella classe JFrame, esce dall'applicazione usando il metodo System.exit (0)
DISPOSE_ON_CLOSE //definita nella classe WindowConstants, chiude ed elimina la finestra (ma non chiude l'applicazione)
DO_NOTHING_ON_CLOSE //definita nella classe WindowConstants, non fa niente e richiede l'installazione di un gestore di eventi
HIDE_ON_CLOSE //definita nella classe WindowConstants, nasconde la finestra, è l'azione di default
Copy<br>
<br>La classe Frame non risponde in alcun modo al clic sul pulsante di chiusura. Per impostare una risposta bisogna predisporre un gestore di eventi per l'evento windowClosing.
<br>Esempio:<br>import javax.swing.*;
public class Finestra extends JFrame{
	public Finestra(){
		setSize (200,200);
		setTitle ("Prima finestra");
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
}
public class ProvaFinestra{
	public static void main (String[] args){
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\finestre-di-applicazione.html</link><guid isPermaLink="false">Java/Grafica/Finestre di applicazione.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Finestre di dialogo]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Le finestre di dialogo sono oggetti della classe JDialog (o Dialog, di cui JDialog è una sottoclasse). Le finestre di dialogo della classe Dialog non possono contenere barre dei menu, mentre quelle della classe JDialog sì (JDialog implementa l'interfaccia MenuContainer).
<br>Una finestra di dialogo può essere modale o non modale: una finestra modale non permette l'interazione dell'utente con altre finestre dell'applicazione finché non viene chiusa. Una finestra di dialogo può essere dichiarata modale con un parametro booleano del costruttore, o successivamente con il metodo setModal (). void setModal (boolean b) specifica se la finestra deve essere modale (true) o no (false).
<br>Si possono utilizzare in modo molto semplice finestre di dialogo comuni usando i metodi statici della classe JoptionPane. Ci sono varie forme, con più o meno parametri; le forme più utili sono:
<br>static void showMessageDialog (Component parentComponent, Object message, String title, int messageType) //mostra un messaggio all'utente;
static String showInputDialog (Component parentComponent, Object message, String title, int messageType) //chiede un input all'utente; quando viene premuto il pulsante OK restituisce la stringa inserita dall'utente; se si deve leggere un valore numerico bisogna convertire la stringa;
static String showInputDialog (Object message) //chiede un input all'utente, specificando soltanto il messaggio da visualizzare; quando viene premuto il pulsante OK restituisce la stringa inserita dall'utente; se si deve leggere un valore numerico bisogna convertire la stringa;
static int showConfirmDialog (Component parentComponent, Object message, String title, int optionType, int messageType) //propone una finestra di conferma; restituisce un valore intero che indica l'opzione selezionata.
Copy<br>
<br>Il significato dei parametri è il seguente:
<br>parentComponent //determina la finestra in cui la finestra di dialogo è visualizzata; può essere null;
message //il messaggio da visualizzare;
title //il titolo della finestra di dialogo;
messageType //una costante che specifica il tipo di messaggio, utilizzato soprattutto per determinare il tipo di icona;
optionType //può essere ERROR_MESSAGE, INFORMATION_MESSAGE, WARNING_MESSAGE, QUESTION_MESSAGE o PLAIN_MESSAGE; una costante che determina le opzioni disponibili in una finestra di conferma; può essere YES_NO_OPTION o YES_NO_CANCEL_OPTION.
Copy<br>Esempio:<br>class Finestra extends JFrame {
	public Finestra () {
		setSize(200,200);
		String input = JOptionPane.showInputDialog ("Titolo della finestra:");
		setTitle(input);
		setVisible(true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
}
public class ProvaFinestra {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\finestre-di-dialogo.html</link><guid isPermaLink="false">Java/Grafica/Finestre di dialogo.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[FlowLayout]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>FlowLayout (disposizione a scorrimento) dispone i componenti uno dopo l'altro, da sinistra a destra e dall'alto verso il basso; in pratica dispone i componenti su una riga e inizia una nuova riga quando è finito lo spazio.
<br>Per default l'allineamento è centrato; si può specificare l'allineamento dei componenti nel costruttore di FlowLayout o con il metodo setAlignment ().
<br>FlowLayout (int align) //costruisce un oggetto FlowLayout specificandone l'allineamento;
void setAlignment (int align) //specifica l'allineamento di un oggetto FlowLayout.
Copy<br>
<br>L'allineamento si può specificare tramite le costanti della classe FlowLayout LEFT, CENTER e RIGHT.
<br>La disposizione a scorrimento non modifica la dimensione dei componenti inseriti.
<br>FlowLayout è il gestore di layout predefinito per tutti i pannelli (quindi Panel e JPanel).
<br>import javax.swing.*;
import java.awt.*;
class Finestra extends JFrame {
	public Finestra () {
		setSize (300,300);
		setTitle ("Finestra");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		Container sfondo = getContentPane ();
		JPanel pannello = new JPanel ();
		pannello.add (new JButton ("Uno"));
		pannello.add (new JButton ("Due"));
		pannello.add (new JButton ("Tre"));
		pannello.add (new JButton ("Quattro"));
		pannello.add (new JButton ("Cinque"));
		pannello.add (new JButton ("Sei"));
		sfondo.add (pannello);
		setVisible (true);
	} 
}
public class ProvaFlowLayout {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	} 
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\flowlayout.html</link><guid isPermaLink="false">Java/Grafica/FlowLayout.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[Gestione del layout]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Il modo in cui vengono disposti i componenti in un contenitore dipende dai gestore di layout utilizzato.
<br>I gestori di layout sono oggetti che implementano l'interfaccia LayoutManager.
<br>Si può specificare il gestore di layout da utilizzare con il metodo setLayout () della classe Container che ha come parametro un oggetto che implementa l'interfaccia LayoutManager.
<br>Pannello con disposizione a zone
<br>JPanel pannello = new Jpanel ();
pannello.setLayout (new BorderLayout ());
Copy<br>
<br>Classi che implementano l’interfaccia LayoutManager:

<br>BorderLayout;
<br>FlowLayout;
<br>GridLayout;
<br>GridBagLayout;
<br>CardLayout.


<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\gestione-del-layout.html</link><guid isPermaLink="false">Java/Grafica/Gestione del layout.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Gli Eventi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>L'esecuzione di un programma può essere guidata dagli eventi, cioè alcune azioni possono essere eseguite quando si verificano determinati eventi, per esempio un'azione dell'utente, il caricamento del programma o il passare del tempo.
<br>Un evento è un'azione riconosciuta da un oggetto. Un evento è un'azione asincrona, cioè che può accadere in qualsiasi momento, generata dal sistema o dall'interazione dell'utente col programma.
<br>Per esempio ogni volta che l'utente utilizza il mouse o la tastiera genera un evento.
<br>Ogni oggetto è in grado di riconoscere determinati eventi. Ogni evento si verifica su un oggetto che viene chiamato origine (o sorgente) dell'evento. L'oggetto su cui si verifica l'evento può rispondere all'evento in modo predefinito.
<br>Si può ottenere una risposta personalizzata a un evento scrivendo il codice opportuno; ogni evento infatti genera automaticamente una chiamata a del codice specifico, che può essere predisposto adeguatamente.
<br>La risposta può coinvolgere anche altri oggetti, addirittura solo oggetti diversi dall'oggetto che riconosce l'evento.
<br>La pressione di un pulsante può provocare il cambio del testo di una etichetta, lasciando inalterato il pulsante.
<br>Alcuni eventi possono generarne automaticamente altri; anche la risposta ad un evento può generare altri eventi.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a>  ]]></description><link>java\grafica\gli-eventi.html</link><guid isPermaLink="false">Java/Grafica/Gli Eventi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:40 GMT</pubDate></item><item><title><![CDATA[GridBagLayout e CardLayout]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>GridBagLayout (disposizione di pacchetti su griglia) crea una griglia in cui ogni componente può occupare più celle. Quando si inserisce un elemento si può specificare la sua posizione e quante celle deve occupare.
<br>CardLayout (disposizione a mazzo di carte) dispone i componenti uno sopra l'altro in modo che uno solo sia visibile; la classe CardLayout ha metodi per modificare l'ordine dei componenti.
<br>Il layout null permette di definire posizione e dimensioni di ciascun componente usando il metodo setBounds () della classe Component.
<br> void setBounds (int x, int y, int width, int height) specifica la posizione del vertice superiore sinistro e la dimensione del componente.<br>Programmi associati:<br>
<a data-href="Finestra con pannello con layout null" href="java\grafica\esempi\finestra-con-pannello-con-layout-null.html" class="internal-link" target="_self" rel="noopener">Finestra con pannello con layout null</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\gridbaglayout-e-cardlayout.html</link><guid isPermaLink="false">Java/Grafica/GridBagLayout e CardLayout.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[GridLayout]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>GridLayout (disposizione a griglia) dispone i componenti secondo una griglia con tutti gli elementi della stessa dimensione; il costruttore di GridLayout permette di specificare il numero di righe e di colonne della griglia.
<br>GridLayout (int rows, int cols) //costruisce un oggetto GridLayout con dato numero di righe e di colonne.
Copy<br>
<br>I componenti vengono inseriti usando il metodo add0 senza specificare la cella della griglia; le celle vengono riempite in ordine, una riga alla volta, e all'interno di una riga da sinistra a destra.
<br>Ogni componente viene ridimensionato in modo da adattarsi alla cella, occupando tutto lo spazio disponibile, quindi tutti i componenti risultano della stessa dimensione.
<br>import javax.swing.*;
import java.awt.*;
class Finestra extends JFrame {
	public Finestra () {
		setSize (300, 300);
		setTitle ("Finestra");
		setDefaultCloseOperation (EXIT_ON_CLOSE);
		Container sfondo = getContentPane ();
		JPanel pannello = new JPanel ();
		pannello.setLayout (new GridLayout (3,2));
		pannello.add (new JButton ("Uno"));
		pannello.add (new JButton ("Due"));
		pannello.add (new JButton ("Tre"));
		pannello.add (new JButton ("Quattro"));
		pannello.add (new JButton ("Cinque"));
		pannello.add (new JButton ("Sei"));
		sfondo.add (pannello);
		setVisible (true);
	} 
}
public class ProvaGridLayout {
	public static void main (String[] args) {
		Finestra finestra = new Finestra ();
	} 
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\gridlayout.html</link><guid isPermaLink="false">Java/Grafica/GridLayout.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Inserimento di componenti]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Dopo aver creato un contenitore si aggiungono i componenti; la classe Container ha il metodo add () per aggiungere un componente al contenitore (quindi tutti i contenitori lo ereditano). Con i contenitori JWindow, JFrame e JDialog i componenti vanno aggiunti a un pannello dei contenuti interno, a cui si accede col metodo getContentPane (); il metodo getContentPane () restituisce un riferimento di tipo Container al pannello dei contenuti, che si usa per inserire i componenti col metodo add ().
<br>Dalla versione 5.0 è possibile aggiungere un componente a JWindow, JFrame e JDialog sia con getContentPane ().add () che semplicemente con add (). L'uso diretto del metodo add () però è solo una semplificazione per i principianti. L'accesso al pannello dei contenuti interno avviene lo stesso, anche se in modo automatico. Per effettuare operazioni diverse dall'aggiunta di un componente (per esempio per colorare lo sfondo di una finestra) bisogna accedere esplicitamente al pannello dei contenuti interno con getContentPane ().
<br>Il metodo getParent () di Component, richiamato su qualsiasi componente, permette di sapere in quale contenitore è inserito il componente. Quando si inseriscono componenti nel pannello dei contenuti, per fare riferimento al frame contenitore bisogna usare il metodo getTopLevelAncestor () di JComponent.
<br>Entrambi restituiscono un oggetto di tipo Container.
<br>Il modo in cui vengono disposti i componenti inseriti in un contenitore dipende dal gestore di layout utilizzato dal contenitore. I gestori di layout sono oggetti che implementano l'interfaccia LayoutManager. Le finestre Window, Frame, Dialog e i pannelli dei contenuti all'interno di JWindow, JFrame e JDialog hanno come gestore di layout di default BorderLayout che divide il contenitore in cinque zone, i margini nord, sud, ovest, est e l'area centrale che occupa tutto lo spazio libero; i componenti vengono inseriti in una zona specifica. I pannelli (Panel e JPanel) hanno come gestore di layout di default FlowLayout che dispone i componenti da sinistra a destra e dall'alto al basso. Si può cambiare gestore di layout usando il metodo setLayoutO della classe Container che ha come parametro un oggetto che implementa l'interfaccia LayoutManager.
<br><br><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\inserimento-di-componenti.html</link><guid isPermaLink="false">Java/Grafica/Inserimento di componenti.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Interfacce grafiche e messaggi asincroni]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>La gestione degli eventi utilizza messaggi (metodi) asincroni.
<br>I messaggi possono essere sincroni quando il mittente deve attendere che il destinatario termini l'esecuzione o asincroni quando il mittente può riprendere subito dopo l'invio del messaggio.
<br>Normalmente i messaggi sono sincroni.
<br>Se i messaggi sono asincroni l'esecuzione deve essere concorrente, cioè il mittente rimane in esecuzione insieme al destinatario.
<br>Con i messaggi asincroni può essere utile il meccanismo di callback. Un oggetto registra il proprio interesse in eventi di qualche tipo inviando un messaggio asincrono a un oggetto ascoltatore, poi continua la sua attività mentre l'ascoltatore controlla il verificarsi degli eventi del tipo registrato: 

<br>quando si verifica un evento l'ascoltatore invia un messaggio di callback all'oggetto che si è registrato per avvertirlo e poi continua la sua attività; il messaggio di callback contiene in un parametro informazioni sull'evento che si è verificato.


<br>I messaggi asincroni possono arrivare in grande quantità; il destinatario li prende da una coda dei messaggi in arrivo, in base alla loro priorità.
<br>Un messaggio asincrono può essere mandato in broadcast (cioè a tutti gli oggetti); gli oggetti che lo ricevono possono agire o ignorare il messaggio.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\interfacce-grafiche-e-messaggi-asincroni.html</link><guid isPermaLink="false">Java/Grafica/Interfacce grafiche e messaggi asincroni.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Introduzione alle interfacce grafiche]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Le interfacce grafiche vengono realizzate sfruttando i principi della programmazione a oggetti. Ogni elemento che appare nell'interfaccia è un oggetto nel significato usuale del termine (cioè è definito da una classe, e richiama metodi per interagire con gli altri elementi).
<br>Gli oggetti dell'interfaccia grafica sono chiamati finestre (o form) e controlli (elementi collocati nelle finestre).
<br>Le proprietà di questi oggetti definiscono le caratteristiche dell'interfaccia.
<br>Per esempio alcune proprietà di una finestra possono essere: dimensioni, posizione sullo schermo, colore, stato (attiva o meno) e così via.
<br>Le finestre possono essere utilizzate per richiedere o per visualizzare informazioni di qualsiasi tipo. I controlli possono essere collocati su un form per gestire varie operazioni, sia di input che di output.
<br>Le finestre usate per richiedere o visualizzare informazioni sono dette anche finestre di dialogo.
<br>Le funzioni dell'applicazione possono essere richiamate usando pulsanti di comando in una finestra, comandi di menu o pulsanti di barre degli strumenti; possono essere disponibili anche combinazioni di tasti che richiamano l'esecuzione di un comando o menu di scelta rapida per l'esecuzione di operazioni frequenti.
<br>Il funzionamento delle applicazioni grafiche è basato sugli eventi, cioè dipende dagli eventi che si verificano.
<br>Tutte le azioni eseguite dall'utente sull'interfaccia generano eventi.
<br>Sono eventi per esempio la variazione del contenuto di una casella di testo e il clic del mouse su un pulsante.
<br>Anche il sistema può generare eventi; inoltre può manifestarsi una catena di eventi, cioè il verificarsi di un evento (e/o la sua gestione) genera altri eventi.
<br>Ogni oggetto riconosce determinati eventi e può rispondere in modo predefinito e/o personalizzato.
<br>Perché l'applicazione si comporti nel modo desiderato bisogna scrivere il codice che deve essere eseguito quando si verifica un particolare evento.
<br>Quando si fa clic su un pulsante, il pulsante appare premuto; questa è una risposta predefinita, è possibile scrivere del codice per fare in modo che il pulsante esegua azioni personalizzate.
<br>Un'applicazione con interfaccia grafica all'avvio presenta un form (chiamato form principale) e resta in attesa del verificarsi di eventi; ogni volta che si verifica un evento vengono eseguite le operazioni predefinite e le eventuali operazioni personalizzate. L'esecuzione dipende dagli eventi che si verificano e quindi dalle operazioni eseguite dall'utente.
<br>Anche la presentazione di un form (o caricamento) costituisce un'evento.
<br>Dopo il caricamento, l'applicazione resta in attesa di altri eventi, generati dalle azioni dell'utente, dal sistema o dall'evento precedente.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\introduzione-alle-interfacce-grafiche.html</link><guid isPermaLink="false">Java/Grafica/Introduzione alle interfacce grafiche.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[JTextArea]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Un'area di testo permette di visualizzare più righe di testo.
<br>Costruttori principali:

<br>JTextArea () costruisce un'area di testo con contenuto nulle dimensione 0,0;
<br>JTextArea (String text) costruisce un'area di testo inizializzata con il testo specificato;
<br>JTextArea (int rows, int columns) costruisce un'area di testo con dato numero di righe e colonne;
<br>JTextArea (String text, int rows, int columns) costruisce un'area di testo inizializzata con il testo specificato e con dato numero di righe e colonne.


<br>Metodi principali, oltre a quelli ereditati da JtextComponent:

<br>void setFont (Font f) imposta il font del carattere;
<br>void setLineWrap (boolean wrap) stabilisce se il testo deve essere portato a capo (valore true) se la linea è troppo lunga, o no (valore false); il valore di default è false.


<br>Quando l'utente preme il tasto Invio in un'area di testo, non viene generato nessun evento. In genere per gestire un'area di testo si aggiunge un pulsante che legge ed elabora il testo inserito quando viene premuto.
<br>Programmi associati:<br>
<a data-href="Testo in un'area di testo e quando si preme il pulsante leggi si stampa il testo nella finestra dei comandi" href="java\grafica\esempi\testo-in-un'area-di-testo-e-quando-si-preme-il-pulsante-leggi-si-stampa-il-testo-nella-finestra-dei-comandi.html" class="internal-link" target="_self" rel="noopener">Testo in un'area di testo e quando si preme il pulsante leggi si stampa il testo nella finestra dei comandi</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\jtextarea.html</link><guid isPermaLink="false">Java/Grafica/JTextArea.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[JTextField]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Costruttori:

<br>JTextField () crea un campo di testo con contenuto null e di dimensione 0;
<br>JTextField (String text) crea un campo di testo inizializzato con il testo specificato;
<br>JTextField (int columns) crea un campo di testo con il numero di colonne specificato (è una misura approssimativa dato che la larghezza dei caratteri è variabile);
<br>JTextField (String text, int columns) crea un campo di testo inizializzato con il testo e con il numero di colonne specificati.


<br>Metodi principali, oltre a quelli ereditati da JtextComponent:

<br>void setFont (Font f) imposta il font di caratteri;
<br>void setHorizontalAlignment (int alignment) imposta l'allineamento orizzontale del testo.


<br>Quando l'utente preme il tasto Invio nella casella di testo, il campo genera un evento azione (ActionEvent); per gestire l'evento bisogna installare un ascoltatore di eventi che implementi l'interfaccia ActionListener, registrandolo nella casella di testo.
<br>Programmi associati:<br>
<a data-href="Somma di numeri inseriti in una casella di testo con risultato visualizzato in un'altra casella di testo" href="java\grafica\esempi\somma-di-numeri-inseriti-in-una-casella-di-testo-con-risultato-visualizzato-in-un'altra-casella-di-testo.html" class="internal-link" target="_self" rel="noopener">Somma di numeri inseriti in una casella di testo con risultato visualizzato in un'altra casella di testo</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\jtextfield.html</link><guid isPermaLink="false">Java/Grafica/JTextField.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:38:03 GMT</pubDate></item><item><title><![CDATA[Layout più complessi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Per creare layout più complessi si possono annidare i contenitori uno dentro l'altro e usare gestori di layout diversi per ogni contenitore. Di solito si inseriscono ì componenti in pannelli e poi si inseriscono i pannelli nel contenitore principale (per esempio la finestra); i pannelli non sono visibili e servono soltanto per organizzare la disposizione dei componenti.
<br>Dato che alcuni gestori di layout, come BorderLayout e GridLayout, ridimensionano i componenti in modo da occupare tutto lo spazio disponibile, se si desidera che un componente mantenga le proprie dimensioni bisogna per prima cosa inserirlo in un pannello e poi inserire il pannello in una zona o in una cella della griglia. Anche se si desidera inserire più componenti nella stessa zona di una disposizione BorderLayout bisogna per prima cosa inserirli in un pannello e poi inserire il pannello nella zona (altrimenti è visibile un solo componente).
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\layout-più-complessi.html</link><guid isPermaLink="false">Java/Grafica/Layout più complessi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Librerie grafiche]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Per la creazione di interfacce grafiche in Java si utilizzano le classi dei package java.awt e javax.swing.
<br>Il package awt (Abstract Window Toolkit) comprende classi per realizzare componenti GUI, per la gestione degli eventi, per la realizzazione di disegni, per la gestione della stampa e così via.
<br>Il package swing amplia le funzioni del package awt e comprende tra l'altro classi con nuovi componenti, versioni migliori di controlli già esistenti e nuovi eventi.
<br>I package awt e swing costituiscono il JFC (Java Foundations Classes) che fornisce tutto ciò che serve per la realizzazione di interfacce grafiche.
<br>Del JFC fanno parte anche le API Accessibility (package javax.accessibility) che supportano l'utilizzo di tecnologie di assistenza, come ingranditori dello schermo e sistemi di riconoscimento vocale.
<br>Alcuni componenti sono disponibili sia nel package awt che nel package swing; conviene utilizzare i componenti swing perché sono indipendenti dalla piattaforma: i componenti awt vengono disegnati usando controlli nativi, cioè l'awt è un'interfaccia tra il sistema nativo di gestione delle finestre e i componenti Java, i componenti swing invece sono scritti in Java, la loro forma viene disegnata direttamente e sono indipendenti dal sistema nativo (è un procedimento più lento ma funziona meglio).
<br>I componenti swing possono contenere un'icona (oggetto della classe lmagelcon). I componenti swing hanno anche una nuova caratteristica detta PL&amp;F (Pluggable Look and Feel). Il look è il modo in cui il componente si presenta e il feel è il modo in cui l'utente può interagire col componente. I componenti cioè hanno la possibilità di modificare facilmente il loro aspetto e il modo di reagire. Si può avere il look and feel Windows, Macintosh, Motif o anche un look and feel personalizzato. Il L&amp;F di un componente viene implementato mediante un delegato: un oggetto utilizzato per visualizzare il componente e per interagire con l'utente; per modificare il L&amp;F basta modificare il delegato con il metodo setUl () del componente.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\librerie-grafiche.html</link><guid isPermaLink="false">Java/Grafica/Librerie grafiche.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Menu]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>I menu (più precisamente le barre di menu) sono oggetti della clase JMenuBar, che contengono sottomenu, oggetti della classe JMenu, che a loro volta contengono voci di menu, oggetti della classe JMenultem.
<br>Un oggetto della clase JMenuBar si crea con il costruttore senza argomenti e si aggiunge al contenitore con il metodo setJMenuBar () di JFrame o Jdialog.

<br>JMenuBar () costruttore di una barra dei menu;
<br>void setJMenuBar (JMenuBar menubar) metodo di JFrame e JDialog, aggiunge la barra dei menu al contenitore.


<br>Si crea ciascun menu con il costruttore di JMenu e si aggiunge alla barra dei menu col metodo add () di JmenuBar.

<br>JMenu (String s) costruisce un menu con il testo indicato;
<br>JMenu add (JMenu c) metodo di JMenuBar, aggiunge il menu alla barra dei menu.


<br>Si crea ciascuna voce di menu con il costruttore di JMenultem e si aggiunge a un menu col metodo add () di Jmenu.

<br>JMenuItem (String s) costruisce una voce di menu con il testo indicato;
<br>JMenuItem add (JMenuItem menuItem) metodo di JMenu, aggiunge la voce di menu al menu.


<br>Si può creare un sottomenu aggiungendo un menu a un menu, sempre col metodo add di Jmenu.
<br>Quando l'utente seleziona una voce di menu, questa genera un evento azione (ActionEvent); per gestire l'evento bisogna installare un ascoltatore di eventi che implementi l'interfaccia ActionListener, registrandolo in ogni voce di menu.
<br>Programmi associati:<br>
<a data-href="Esempio che scrive la voce di menu selezionata in una casella di testo nella finestra" href="java\grafica\esempi\esempio-che-scrive-la-voce-di-menu-selezionata-in-una-casella-di-testo-nella-finestra.html" class="internal-link" target="_self" rel="noopener">Esempio che scrive la voce di menu selezionata in una casella di testo nella finestra</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\menu.html</link><guid isPermaLink="false">Java/Grafica/Menu.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Modello di delegazione degli eventi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Le azioni dell'utente possono generare molti eventi irrilevanti per l'applicazione.
<br>Per esempio ogni volta che l'utente sposta il mouse viene generato un evento; l'applicazione potrebbe non essere interessata a tutti gli spostamenti (a meno che non debba per esempio disegnare una linea in base agli spostamenti del mouse).
<br>Per ogni evento a cui l'applicazione è interessata e che deve gestire bisogna installare un oggetto ascoltatore (o intercettatore) di eventi.
<br>Un ascoltatore è un oggetto di una classe che implementa un'interfaccia di ascolto, cioè una interfaccia derivata da EventListener.
<br>Per ogni tipo di evento esiste una specifica interfaccia di ascolto; tutte le interfacce di ascolto sono estensioni di EventListener.
<br>Interfacce di ascolto per gli eventi più comuni
<br>ActionListener //interfaccia di ascolto per gli eventi ActionEvent,
FocusListener //interfaccia di ascolto per gli eventi FocusEvent,
KeyListener //interfaccia di ascolto per gli eventi KeyEvent,
MouseListener //interfaccia di ascolto per gli eventi MouseEvent relativi al clic del mouse;
MouseMotionListener //interfaccia di ascolto per gli eventi MouseEvent relativi al movimento del mouse;
WindowListener //interfaccia di ascolto per gli eventi WindowEvent.
Copy<br>
<br>Ogni interfaccia può contenere più metodi, uno per ogni specifico evento di un certo tipo.
<br>Per esempio l'interfaccia WindowListener contiene un metodo per ogni evento relativo alla finestra (per ogni evento di tipo WindowEvent): un metodo per gestire l'evento attivazione della finestra, uno per l'evento riduzione a icona, uno per l'evento chiusura e così via.
<br>Per gestire un evento bisogna:

<br>definire una classe che implementi l'interfaccia relativa al tipo di evento; la classe deve ridefinire tutti i metodi dell'interfaccia, ma si possono lasciare vuoti i metodi relativi agli eventi che non interessano, inserendo il codice opportuno solo nei metodi relativi agli eventi che sí vogliono gestire; Per esempio per gestire uno degli eventi relativi alla finestra (un WindowEvent) bisogna definire una classe che implementi l'interfaccia WindowListener, si devono ridefinire tutti ma se si vuole gestire solo la chiusura della finestra si possono lasciare tutti vuoti tranne quello che gestisce la chiusura.
<br>creare un oggetto di questa classe e registrarlo come ascoltatore nell'oggetto che può generare l'evento; i componenti, in base agli eventi che possono generare, dispongono di metodi per registrare i relativi ascoltatori; su uno stesso oggetto origine possono essere registrati più ascoltatori, per eventi diversi.


<br>Metodi di registrazione degli ascoltatori
<br>Metodo di registrazione Classe in cui è definito
<br><br>
<br>In genere risulta più semplice realizzare la classe che implementa l'interfaccia di ascolto come classe interna o come coincidente con la classe dell'oggetto origine.
<br>Se una classe implementa una interfaccia di ascolto deve ridefinire tutti i metodi di gestione degli eventi, eventualmente lasciando vuoti quelli relativi agli eventi che non interessano. Si può semplificare la scrittura del codice usando le classi adattatore (adapter); una classe adattatore implementa una interfaccia di ascolto e ne ridefinisce tutti i metodi in modo che non facciano nulla.
<br>Classi adapter relative alle interfacce di ascolto
<br><br>
<br>Non esiste la classe adattatore per l'interfaccia ActionListener, che contiene un solo metodo.
<br>Per gestire gli eventi con le classi adattatore bisogna:

<br>creare una classe di ascolto estendendo la classe adattatore relativa al tipo di evento,
<br>creare un oggetto di questa classe e registrarlo come ascoltatore nell'oggetto che può generare l'evento.


<br>Questo modello di gestione degli eventi è chiamato modello di delegazione degli eventi: gli eventi sono generati da un oggetto origine ma sono gestiti da un oggetto ascoltatore, di una classe diversa, che si registra presso l'origine; la gestione degli eventi cioè viene delegata a un oggetto ascoltatore.
<br>Quando si verifica un evento su un oggetto, vengono esaminati gli ascoltatori registrati su quell'oggetto; se c'è un ascoltatore in grado di gestire quel tipo di evento viene richiamato il metodo corrispondente all'evento passandogli come parametro l'oggetto che descrive l'evento, in caso contrario l'evento viene abbandonato; poi il sistema passa alla gestione dell'evento successivo presente nella coda, o, se la coda è vuota, resta in attesa del verificarsi di altri eventi.
<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\modello-di-delegazione-degli-eventi.html</link><guid isPermaLink="false">Java/Grafica/Modello di delegazione degli eventi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Origine e ascoltatore coincidenti]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>È possibile anche fare in modo che la classe origine e la classe ascoltatore coincidano, cioè che l'origine faccia da ascoltatore per sé stesso. Per ottenere questo risultato la classe origine deve implementare l'interfaccia ascoltatore e ridefinire tutti i metodi di gestione degli eventi. In questo modo i metodi di gestione degli eventi, appartenendo alla stessa classe dell'origine, possono usare tutti gli attributi e i metodi dell'origine.
<br>Gestione degli eventi del mouse in una finestra di una applicazione, con l'ascoltatore coincidente con l'origine.
<br>import javax.swing.*;
import java.awt.event.*;
class Finestra extends JFrame implements MouseListener {
	Finestra () {
		super ("ascoltatore Mouse coincidente");
		setSize (200, 200);
		addMouseListener (this);
		setVisible (true);
		setDefaultCloseOperation (EXIT_ON_CLOSE);
	}
	public void mouseClicked (MouseEvent e) {
		System.out.println ("click in " + e.getX () + ", " + e.getY ());
	}
	public void mouseEntered (MouseEvent e) {
	System.out.println ("mouse dentro");
	}
	public void mouseExited (MouseEvent e) {
		System.out.println ("mouse fuori");
	}
	public void mousePressed (MouseEvent e) {
		System.out.println ("pulsante premuto in " + e.getX () + ", " + e.getY ());
	}
	public void mouseReleased (MouseEvent e) {
		System.out.println ("pulsante rilasciato in " + e.getX () + ", " + e.getY ());
	}
}
public class ascoltatoreMouseCoincidente {
	public static void main (String [] args) {
		Finestra f = new Finestra ();
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\origine-e-ascoltatore-coincidenti.html</link><guid isPermaLink="false">Java/Grafica/Origine e ascoltatore coincidenti.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Pulsanti]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>I pulsanti sono oggetti della classe JButton.
<br>Costruttori principali:
<br>JButton () //crea un pulsante senza testo;
JButton (String text) //crea un pulsante con il testo specificato.
Copy<br>
<br>Metodi principali:
<br>void setText (String text) //ereditato da abstractbutton, modifica il testo sul pulsante.
Copy<br>
<br>Quando un pulsante riceve un clic invia un evento azione (ActionEvent); per gestire. L'evento bisogna installare un ascoltatore di eventi che implementi l'interfaccia ActionListener, registrandolo nel pulsante.
<br>Se si hanno più pulsanti si può definire una classe ascoltatore diversa per ogni pulsante, oppure lo stesso ascoltatore per tutti i pulsanti, in cui il metodo actionPerformed () usa il metodo getSource () di EventObject, da cui ActonEvent deriva, per sapere su quale pulsante è stato fatto clic.
<br>Alcuni programmatori per individuare il pulsante in un unico gestore di eventi usano anche il metodo getActionCommand () di ActionEvent, che restituisce la stringa scritta sul pulsante.
<br>class GestorePulsanti implements ActionListener {
	public void actionPerformed (ActionEvent e) {
		String pulsante = e.getActionCommand();
		if (pulsante.equals ("Rosso"))
			sfondo.setBackground(Color.RED);
		if (pulsante,equals ("Verde"))
			sfondo.setBackground(Color.GREEN);
	}
}
Copy<br>
<br>Il metodo getActionCommand (), però, più che per distinguere tra pulsanti diversi, serve per distinguere tra usi diversi dello stesso pulsante (per esempio un pulsante Mostra che una volta premuto diventa Nascondi).
<br>Programmi associati:<br>
<a data-href="Finestra con due pulsanti per far diventare rosso o verde lo sfondo con gestori di eventi separati" href="java\grafica\esempi\finestra-con-due-pulsanti-per-far-diventare-rosso-o-verde-lo-sfondo-con-gestori-di-eventi-separati.html" class="internal-link" target="_self" rel="noopener">Finestra con due pulsanti per far diventare rosso o verde lo sfondo con gestori di eventi separati</a><br>
<a data-href="Finestra con due pulsanti per far diventare rosso o verde lo sfondo con un unico gestore di eventi per i due pulsanti" href="java\grafica\esempi\finestra-con-due-pulsanti-per-far-diventare-rosso-o-verde-lo-sfondo-con-un-unico-gestore-di-eventi-per-i-due-pulsanti.html" class="internal-link" target="_self" rel="noopener">Finestra con due pulsanti per far diventare rosso o verde lo sfondo con un unico gestore di eventi per i due pulsanti</a><br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\pulsanti.html</link><guid isPermaLink="false">Java/Grafica/Pulsanti.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Uso della classe adattatore]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>
<br>Per gli eventi del mouse è disponibile la classe adattatore MouseAdapter che implementa l'interfaccia MouseListener, ridefinendone tutti i metodi in modo che non facciano nulla. Per creare un ascoltatore degli eventi del mouse basta estendere la classe MouseAdapter e ridefinire solo i metodi relativi agli eventi che interessano.
<br>La classe ascoltatore che si definisce può essere esterna o interna.
<br>Gestione del solo evento clic del mouse in una finestra di una applicazione, con l'ascoltatore realizzato come classe interna che estende la classe adattatore MouseAdapter.
<br>import javax.swing.*;
import java.awt.event.*;
public class Finestra extends JFrame {
	public Finestra () {
		super ("Finestra");
		setSize (200,200);
		addMouseListener (new Finestra.AscoltatoreClic ());
		setVisible (true);
		setDefaultCloseOperation (EXILON_CLOSE);
	}
	class AscoltatoreClic extends MouseAdapter {
		public void mouseClicked (MouseEvent e) {
			System.out.println ("clic del mouse nella
			posizione " + e.getX () + ", " + e.getY());
		}
	}
}
Copy<br><a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Torna Indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\grafica\uso-della-classe-adattatore.html</link><guid isPermaLink="false">Java/Grafica/Uso della classe adattatore.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Input da stringa, lettura di token e interi con delimitatore ;]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import java.util.Scanner;
public class InputConScanner {
	public static void main(String[] argv) {
		String input = "100;120;300;80";
		Scanner scanner = new Scanner(input);
		scanner.useDelimiter(";");
		while(scanner.hasNext()) {
			// se il prossimo token è un intero lo estrae e lo visualizza
			if(scanner.hasNextInt())
				System.out.println(scanner.nextInt());
			// altrimenti lo salta
			else
				scanner.next();
		}
		scanner.close();
	}
}
Copy<br>L’esempio precedente produce l’output seguente:<br>
<br>100
<br>120
<br>300
<br>80
<br><br>Attenzione, l’esempio precedente funziona solo se i numeri interi sono separati esattamente da un solo carattere di punto e virgola. Se si vuole che funzioni anche nel caso in cui a separarli ci siano più caratteri diversi, compreso gli spazi, bisogna passare al metodo un’espressione regolare, argomento questo complesso per il quale si rimanda alla documentazione del linguaggio. Qui si fornisce solo la soluzione nel caso tra i numeri interi, oltre al punto e virgola, ci siano anche degli<br>
spazi. In questo caso la stringa da passare al metodo è : “\s;\s”. Il primo backslash<br>
nell’espressione indica che quello che segue è un carattere speciale, ossia l’espressione s* che vuol dire “da 0 a un numero a piacere di spazi“.<br>P.S. Per risolvere un problema di estrazione di token da una stringa come il precedente, può essere più conveniente o sfruttare direttamente i metodi della classe String, come ad esempio i metodi split() e trim(), o riccorre alla classe StringTokenizer sftuttando i metodi hasMoreToken() e nextToken(), per i quali si rimanda alla documentazione ufficiale del linguaggio Java (link).<br>public class Test {
	public static void main(String[] args) {
		String s = "3; A; 4; A; 5; A";
		//Prima soluzione: metodi split() e trim() della classe String
		String[] vs = s.split(";");
		for(int i=0; i&lt;vs.length; i+=2){
			System.out.print(vs[i].trim());
			System.out.println(vs[i+1].trim());
		}
		System.out.println("");
		//Seconda soluzione: oggetto di classe StringTokenizer
		StringTokenizer st = new StringTokenizer(s, ";");
		while(st.hasMoreTokens()) {
			System.out.print(st.nextToken().trim());
			System.out.println(st.nextToken().trim());
		}
	}
}
Copy<br>Il codice di sopra produce l’output seguente:<br>
<br>3A
<br>4A
<br>5A
<br>3A
<br>4A
<br>5A
<br><a data-tooltip-position="top" aria-label="La classe Scanner" data-href="La classe Scanner" href="java\la-classe-scanner\la-classe-scanner.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\la-classe-scanner\esempi\input-da-stringa,-lettura-di-token-e-interi-con-delimitatore-;.html</link><guid isPermaLink="false">Java/La classe Scanner/Esempi/Input da stringa, lettura di token e interi con delimitatore ;.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Input di una riga di testo da tastiera]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br><br>import java.util.Scanner;
public class ProvaScanner {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in); //istanzia un oggetto lettore di tipo Scanner
		String s = in.nextLine(); //legge una riga di testo e la memorizza nella variabile s
		System.out.println("Ho letto la riga: " + s);
	}
}
Copy<br><br>import java.util.Scanner;
public class ProvaScanner {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in); //istanzia un oggetto lettore di tipo Scanner
		String s = in.nextLine(); //legge una riga di testo e la memorizza nella variabile s
		System.out.println("Ho letto la riga: " + s);
	}
}
Copy<br><a data-tooltip-position="top" aria-label="La classe Scanner" data-href="La classe Scanner" href="java\la-classe-scanner\la-classe-scanner.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\la-classe-scanner\esempi\input-di-una-riga-di-testo-da-tastiera.html</link><guid isPermaLink="false">Java/La classe Scanner/Esempi/Input di una riga di testo da tastiera.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Input di una stringa - Lettura di token di interi]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import java.util.Scanner;
public class Main {
	public static void main(String[] argv) {
		String input = "aaa 1 xyz 56 78 .,- pp 1092 yasl 3.14 100";
		Scanner scanner = new Scanner(input);
		while(scanner.hasNext()) {
			// se il prossimo token è un intero lo estrae e lo visualizza
			if(scanner.hasNextInt())
				System.out.println(scanner.nextInt());
			// altrimenti lo salta
			else
				scanner.next();
		}
		scanner.close();
	}
}
Copy<br>Nell’esempio di sopra si ha una stringa che utilizza un delimitatore di default (lo spazio), dalla quale vengono estratti solo gli interi saltando i restanti token. L’output ottenuto è il seguente:<br>
<br>1
<br>56
<br>78
<br>1092
<br>100
<br><a data-tooltip-position="top" aria-label="La classe Scanner" data-href="La classe Scanner" href="java\la-classe-scanner\la-classe-scanner.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\la-classe-scanner\esempi\input-di-una-stringa-lettura-di-token-di-interi.html</link><guid isPermaLink="false">Java/La classe Scanner/Esempi/Input di una stringa - Lettura di token di interi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[Lettura di interi da tastiera]]></title><description><![CDATA[<a class="tag" href="?query=tag:esempio" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#esempio</a> 
 <br>import java.util.Scanner;
import java.util.InputMismatchException;
public class Main {
	public static void main(String[] argv) {
		int i, j;
		Scanner scanner = new Scanner(System.in);
		try {
			System.out.print("Primo numero: ");
			i = scanner.nextInt();
			System.out.print("Secondo numero: ");
			j = scanner.nextInt();
			System.out.println(i + j);
		} catch(InputMismatchException ex) {
			System.out.println("Errore, input non valido.);
		} finally {
			scanner.close();
		}
	}
}
Copy<br>Nell’esempio di sopra vengono prelevati da tastiera due numeri e vengono sommati. Il tutto è stato inserito in un blocco try-catch-finally poiché gli input forniti potrebbero non essere degli interi e in tal caso viene lanciata un’eccezione di classe InputMismatchException. In questo esempio viene utilizzato anche il metodo close() che permette di rilasciare le risorse occupate dall’oggetto di classe Scanner creato.<br><a data-tooltip-position="top" aria-label="La classe Scanner" data-href="La classe Scanner" href="java\la-classe-scanner\la-classe-scanner.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:esempio" class="tag" target="_blank" rel="noopener">#esempio</a> ]]></description><link>java\la-classe-scanner\esempi\lettura-di-interi-da-tastiera.html</link><guid isPermaLink="false">Java/La classe Scanner/Esempi/Lettura di interi da tastiera.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 11:23:39 GMT</pubDate></item><item><title><![CDATA[La classe Scanner]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>La classe Scanner rappresenta la soluzione più semplice per realizzare in Java un input da uno stream di caratteri. La classe Scanner appartiene al package java.util e i suoi oggetti sono in grado di individuare e interpretare i tipi primitivi e le stringhe presenti all’interno di uno stream di caratteri.<br>Essa presenta diversi costruttori che permettono di ottenere un oggetto di tipo Scanner a partire da oggetti di altri tipi, quali ad esempio:<br>
<br>InputStream, utile in quei casi in cui, per esempio, si debba leggere da tastiera (l’oggetto System.in, si ricorda, è di tipo InputStream).
<br>String, utile in quei casi in cui sia necessario procurarsi degli input da una stringa.
<br>File, utile in quei casi in cui l’input proviene da un file di testo.<br>
Vediamo solo alcuni esempi di utilizzo per i primi due casi: lettura da tastiera e da stringhe, per il terzo caso della lettura da un file di testo lo vedremo più avanti.
<br>(Si tenga presente che la classe Scanner suddivide lo stream dei caratteri in token, cioè in spezzoni di stringhe separate dai caratteri delimitatori. I caratteri delimitatori di default sono: gli spazi, i caratteri di tabulazione e i caratteri di newline).<br>
<br>int nextInt(): legge il token successivo interpretandolo come un numero intero e lo restituisce al chiamante, o lancia un eccezione di tipo InputMismatchException se il token non è un intero.
<br>double nextDouble(): legge il token successivo interpretandolo come un numero reale e lo restituisce al chiamante, o lancia un eccezione di tipo InputMismatchException se il token non è un reale.
<br>String nextLine(): legge la riga di testo (successiva) e la restituisce al chiamante.
<br>String next(): legge il successivo token senza delimitatori e lo restituisce al chiamante.
<br>boolean hasNextInt(): restituisce vero se il prossimo token può essere interpretato come un numero intero, falso altrimenti.
<br>boolean hasNextDouble(): restituisce vero se il prossimo token può essere interpretato come un numero reale, falso altrimenti.
<br>boolean hasNextLine(): restituisce vero se in input è disponibile una ulteriore riga, falso altrimenti.
<br>boolean hasNext(): restituisce vero se in input è disponibile un ulteriore token, falso altrimenti.
<br>Scanner useDelimiter(String): modifica il delimitatore dei token, dove la stringa passata come parametro può essere una espressione regolare (vedi esempio più avanti).
<br>Il caso più tipico di utilizzo di un oggetto di classe Scanner è quello che utilizza il metodo nextLine() per leggere una riga intera.<br>Programmi associati:<br>
-  <a data-href="Input di una riga di testo da tastiera" href="java\la-classe-scanner\esempi\input-di-una-riga-di-testo-da-tastiera.html" class="internal-link" target="_self" rel="noopener">Input di una riga di testo da tastiera</a><br>
-  <a data-href="Lettura di interi da tastiera" href="java\la-classe-scanner\esempi\lettura-di-interi-da-tastiera.html" class="internal-link" target="_self" rel="noopener">Lettura di interi da tastiera</a><br>
-  <a data-href="Input di una stringa - Lettura di token di interi" href="java\la-classe-scanner\esempi\input-di-una-stringa-lettura-di-token-di-interi.html" class="internal-link" target="_self" rel="noopener">Input di una stringa - Lettura di token di interi</a><br>
-  <a data-href="Input da stringa, lettura di token e interi con delimitatore ;" href="java\la-classe-scanner\esempi\input-da-stringa,-lettura-di-token-e-interi-con-delimitatore-;.html" class="internal-link" target="_self" rel="noopener">Input da stringa, lettura di token e interi con delimitatore ;</a><br><a data-tooltip-position="top" aria-label="Index" data-href="Index" href="index.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\la-classe-scanner\la-classe-scanner.html</link><guid isPermaLink="false">Java/La classe Scanner/La classe Scanner.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 08:46:42 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Concetti sulla Programmazione OOP" href="about:blank#Concetti_sulla_Programmazione_OOP" class="internal-link" target="_self" rel="noopener">Concetti sulla Programmazione OOP</a>
<br><a data-href="#Programmazione OOP" href="about:blank#Programmazione_OOP" class="internal-link" target="_self" rel="noopener">Programmazione OOP</a>
<br><a data-href="#Oggetti e classi di Oggetti" href="about:blank#Oggetti_e_classi_di_Oggetti" class="internal-link" target="_self" rel="noopener">Oggetti e classi di Oggetti</a>
<br><br><br><img alt="Immagini/Pasted image 20240208104042.png" src="lib\media\pasted-image-20240208104042.png"><br><br>Programmare ad oggetti non velocizza l’esecuzione dei programmi ... Programmare ad oggetti non ottimizza l’uso della memoria ... Programmare ad oggetti facilita la progettazione e il mantenimento di sistemi software molto complessi.<br>Principali vantaggi:<br>
<br>supporto naturale alla modellazione software degli oggetti del mondo reale o del modello astratto da riprodurre
<br>più facile gestione e manutenzione di progetti di grandi dimensioni
<br>modularità e riuso di codice
<br>permette di definire oggetti software in grado di interagire gli uni con gli altri attraverso lo scambio di messaggi
<br>Riduce la dipendenza del codice di alto livello dalla rappresentazione dei dati in quanto l’accesso ai dati è mediato da un’interfaccia.
<br><br>L’elemento fondamentale della OOP è la classe.<br>La classe è un tipo aggregato che presenta forti analogie con le strutture.<br>Il concetto di struttura nasce dall’esigenza di manipolare insiemi eterogenei d’informazioni fra loro logicamente collegate. Ciò consente di creare delle<br>
nuove variabili che meglio modellano i dati riguardanti il problema che<br>
l’utente sta trattando.<br>La classe è la descrizione astratta di un tipo di dato (ADT) e descrive una<br>
famiglia di oggetti con caratteristiche e comportamenti simili.<br>Un oggetto è una istanza della classe: quando si istanzia una variabile<br>
definendola di una certa classe, si crea un oggetto di quella<br>
classe rappresentato dal nome della variabile istanziata.<br>La differenza tra classe e oggetto è la stessa differenza che c’è tra tipo di dato<br>
e dato.<br><img alt="Immagini/Pasted image 20240208104945.png" src="lib\media\pasted-image-20240208104945.png"><br><img alt="Immagini/Pasted image 20240208105000.png" src="lib\media\pasted-image-20240208105000.png"><br>
Ogni oggetto è definito da:<br>
<br>Attributi che rappresentano le sue caratteristiche o proprietà fisiche utili a definire il suo stato e sono campi (variabili o costanti)
<br>Metodi che rappresentano i comportamenti ammissibili o le azioni, le proprietà dinamiche, cioè le funzionalità dell’oggetto stesso e chi usa l’oggetto può attivarli. I metodi vengono realizzati con le funzioni contenenti le istruzioni che implementano le azioni dell’oggetto e possono avere parametri e fornire valori di ritorno.<br>
Lo stato di un oggetto, è l'insieme dei valori delle sue proprietà in un<br>
determinato istante di tempo (valori assunte dalle variabili). Se cambia<br>
anche un solo valore di una proprietà di un oggetto, il suo stato varierà di<br>
conseguenza.<br>
Nel corso dell'elaborazione, un oggetto è un’entità soggetta ad una<br>
creazione, ad un suo utilizzo e, infine, alla sua distruzione.<br>
<img alt="Immagini/Pasted image 20240208105226.png" src="lib\media\pasted-image-20240208105226.png"><br>
<img alt="Immagini/Pasted image 20240208105247.png" src="lib\media\pasted-image-20240208105247.png">
<br><a data-tooltip-position="top" aria-label="Index" data-href="Index" href="index.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>java\programmazione-oop\concetti-sulla-programmazione-oop.html</link><guid isPermaLink="false">Java/Programmazione OOP/Concetti sulla Programmazione OOP.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 08:45:26 GMT</pubDate><enclosure url="lib\media\pasted-image-20240208104042.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\pasted-image-20240208104042.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Glossario - Gestione File]]></title><description><![CDATA[<a class="tag" href="?query=tag:glossario" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#glossario</a> 
 <br>
<br><a data-href="Serializzazione e persistenza degli oggetti su file" href="java\gestione-file\serializzazione-e-persistenza-degli-oggetti-su-file.html" class="internal-link" target="_self" rel="noopener">Serializzazione e persistenza degli oggetti su file</a>
<br><a data-href="Operazioni sui file" href="java\gestione-file\operazioni-sui-file.html" class="internal-link" target="_self" rel="noopener">Operazioni sui file</a>
<br><a data-href="Serializzazione e Deserializzazione" href="java\gestione-file\serializzazione-e-deserializzazione.html" class="internal-link" target="_self" rel="noopener">Serializzazione e Deserializzazione</a>
<br><a data-href="File CSV" href="java\gestione-file\file-csv.html" class="internal-link" target="_self" rel="noopener">File CSV</a>
<br><a href=".?query=tag:glossario" class="tag" target="_blank" rel="noopener">#glossario</a> ]]></description><link>java\glossario-gestione-file.html</link><guid isPermaLink="false">Java/Glossario - Gestione File.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 24 Jun 2024 12:05:45 GMT</pubDate></item><item><title><![CDATA[Glossario - Grafica Java]]></title><description><![CDATA[<a class="tag" href="?query=tag:glossario" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#glossario</a> 
 <br>
<br><a data-href="Gli Eventi" href="java\grafica\gli-eventi.html" class="internal-link" target="_self" rel="noopener">Gli Eventi</a>
<br><a data-href="Introduzione alle interfacce grafiche" href="java\grafica\introduzione-alle-interfacce-grafiche.html" class="internal-link" target="_self" rel="noopener">Introduzione alle interfacce grafiche</a>
<br><a data-href="Costruire un programma con interfaccia grafica" href="java\grafica\costruire-un-programma-con-interfaccia-grafica.html" class="internal-link" target="_self" rel="noopener">Costruire un programma con interfaccia grafica</a>
<br><a data-href="Interfacce grafiche e messaggi asincroni" href="java\grafica\interfacce-grafiche-e-messaggi-asincroni.html" class="internal-link" target="_self" rel="noopener">Interfacce grafiche e messaggi asincroni</a>
<br><a data-href="Librerie grafiche" href="java\grafica\librerie-grafiche.html" class="internal-link" target="_self" rel="noopener">Librerie grafiche</a>
<br><a data-href="Componenti e Contenitori" href="java\grafica\componenti-e-contenitori.html" class="internal-link" target="_self" rel="noopener">Componenti e Contenitori</a>
<br><a data-href="Contenitori" href="java\grafica\contenitori.html" class="internal-link" target="_self" rel="noopener">Contenitori</a>
<br><a data-href="Finestre" href="java\grafica\finestre.html" class="internal-link" target="_self" rel="noopener">Finestre</a>
<br><a data-href="Finestre di applicazione" href="java\grafica\finestre-di-applicazione.html" class="internal-link" target="_self" rel="noopener">Finestre di applicazione</a>
<br><a data-href="Finestre di dialogo" href="java\grafica\finestre-di-dialogo.html" class="internal-link" target="_self" rel="noopener">Finestre di dialogo</a>
<br><a data-href="Java/Grafica/Eventi" href="java\grafica\eventi.html" class="internal-link" target="_self" rel="noopener">Java/Grafica/Eventi</a>
<br><a data-href="Modello di delegazione degli eventi" href="java\grafica\modello-di-delegazione-degli-eventi.html" class="internal-link" target="_self" rel="noopener">Modello di delegazione degli eventi</a>
<br><a data-href="Eventi del mouse - classe ascoltatore esterna" href="java\grafica\eventi-del-mouse-classe-ascoltatore-esterna.html" class="internal-link" target="_self" rel="noopener">Eventi del mouse - classe ascoltatore esterna</a>
<br><a data-href="Eventi del mouse - classe ascoltatore interna" href="java\grafica\eventi-del-mouse-classe-ascoltatore-interna.html" class="internal-link" target="_self" rel="noopener">Eventi del mouse - classe ascoltatore interna</a>
<br><a data-href="Origine e ascoltatore coincidenti" href="java\grafica\origine-e-ascoltatore-coincidenti.html" class="internal-link" target="_self" rel="noopener">Origine e ascoltatore coincidenti</a>
<br><a data-href="Uso della classe adattatore" href="java\grafica\uso-della-classe-adattatore.html" class="internal-link" target="_self" rel="noopener">Uso della classe adattatore</a>
<br><a data-href="Eventi finestra" href="java\grafica\eventi-finestra.html" class="internal-link" target="_self" rel="noopener">Eventi finestra</a>
<br><a data-href="Eventi della tastiera" href="java\grafica\eventi-della-tastiera.html" class="internal-link" target="_self" rel="noopener">Eventi della tastiera</a>
<br><a data-href="Eventi sui componenti - ActionEvent" href="java\grafica\eventi-sui-componenti-actionevent.html" class="internal-link" target="_self" rel="noopener">Eventi sui componenti - ActionEvent</a>
<br><a data-href="Inserimento di componenti" href="java\grafica\inserimento-di-componenti.html" class="internal-link" target="_self" rel="noopener">Inserimento di componenti</a>
<br><a data-href="Gestione del layout" href="java\grafica\gestione-del-layout.html" class="internal-link" target="_self" rel="noopener">Gestione del layout</a>
<br><a data-href="BorderLayout" href="java\grafica\borderlayout.html" class="internal-link" target="_self" rel="noopener">BorderLayout</a>
<br><a data-href="FlowLayout" href="java\grafica\flowlayout.html" class="internal-link" target="_self" rel="noopener">FlowLayout</a>
<br><a data-href="GridLayout" href="java\grafica\gridlayout.html" class="internal-link" target="_self" rel="noopener">GridLayout</a>
<br><a data-href="GridBagLayout e CardLayout" href="java\grafica\gridbaglayout-e-cardlayout.html" class="internal-link" target="_self" rel="noopener">GridBagLayout e CardLayout</a>
<br><a data-href="Layout più complessi" href="java\grafica\layout-più-complessi.html" class="internal-link" target="_self" rel="noopener">Layout più complessi</a>
<br><a data-href="Bordi" href="java\grafica\bordi.html" class="internal-link" target="_self" rel="noopener">Bordi</a>
<br><a data-href="Etichette" href="java\grafica\etichette.html" class="internal-link" target="_self" rel="noopener">Etichette</a>
<br><a data-href="Pulsanti" href="java\grafica\pulsanti.html" class="internal-link" target="_self" rel="noopener">Pulsanti</a>
<br><a data-href="Caselle e aree di testo" href="java\grafica\caselle-e-aree-di-testo.html" class="internal-link" target="_self" rel="noopener">Caselle e aree di testo</a>
<br><a data-href="JTextField" href="java\grafica\jtextfield.html" class="internal-link" target="_self" rel="noopener">JTextField</a>
<br><a data-href="JTextArea" href="java\grafica\jtextarea.html" class="internal-link" target="_self" rel="noopener">JTextArea</a>
<br><a data-href="Caselle di controllo e pulsanti di selezione" href="java\grafica\caselle-di-controllo-e-pulsanti-di-selezione.html" class="internal-link" target="_self" rel="noopener">Caselle di controllo e pulsanti di selezione</a>
<br><a data-href="Caselle combinate" href="java\grafica\caselle-combinate.html" class="internal-link" target="_self" rel="noopener">Caselle combinate</a>
<br><a data-href="Menu" href="java\grafica\menu.html" class="internal-link" target="_self" rel="noopener">Menu</a>
<br><a data-href="Altri componenti e creazione di componenti personalizzati" href="java\grafica\altri-componenti-e-creazione-di-componenti-personalizzati.html" class="internal-link" target="_self" rel="noopener">Altri componenti e creazione di componenti personalizzati</a>
<br><a data-tooltip-position="top" aria-label="Index" data-href="Index" href="index.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:glossario" class="tag" target="_blank" rel="noopener">#glossario</a> ]]></description><link>java\glossario-grafica-java.html</link><guid isPermaLink="false">Java/Glossario - Grafica Java.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 19 Feb 2024 07:57:55 GMT</pubDate></item><item><title><![CDATA[Eventi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>jQuery è un linguaggio basato molto sugli eventi. Per eventi intendiamo quell’insieme<br>
di interazioni che possono avvenire con la pagina web, come il passaggio del mouse<br>
sopra un elemento, il click, ecc.<br>
Alcuni degli eventi principali:<br>Eventi legati al mouse:<br>
<br>click - click del mouse
<br>dblclick - doppio click del mouse
<br>mouseenter - il puntatore entra in un elemento
<br>mouseleave - il puntatore esce da un elemento
<br>Keyboard Events:<br>
<br>keypress - pressione di un tasto
<br>keydown - quando un tasto viene mantenuto premuto
<br>keyup - quando un tasto viene rilasciato
<br>Form Events:<br>
<br>submit - pressione del tasto submit del form
<br>change - cambiamento di un valore in uno degli input nel form
<br>focus - selezione di una delle caselle di inserimento nel form
<br>blur - uscita da una delle caselle di inserimento nel form
<br>Window/Document:<br>
<br>load - caricamento del documento
<br>resize - cambiamento delle dimensioni della finestra
<br>scroll - spostamento della barra di scorrimento laterale
<br>unload - uscita dal documento/finestra
<br>La maggior parte degli eventi è supportata da un metodo presente nelle librerie di<br>
jQuery.<br>Quando si fa riferimento un evento, è necessario poi indicare cosa succede al suo<br>
accadere. Per esempio, questo script, mostra un alert quando si preme un link.<br>$(document).ready(function() {
	$("a").click(function(){
		alert("Hai cliccato un link");
	});
});
Copy<br><a data-tooltip-position="top" aria-label="JavaScript/Glossario - jQuery JavaScript" data-href="JavaScript/Glossario - jQuery JavaScript" href="javascript\glossario-jquery-javascript.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>javascript\jquery\eventi.html</link><guid isPermaLink="false">JavaScript/jQuery/Eventi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 15:18:08 GMT</pubDate></item><item><title><![CDATA[La libreria jQuery di JavaScript]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>La libreria jQuery è nata come semplificazione e ampliamento delle funzionalità di<br>
Javascript. Permette di implementare diverse tecniche altrimenti laboriose e più<br>
complesse da implementare, come ad esempio le chiamate asincrone, ovvero il<br>
caricamento di dati nella pagina senza ricaricarla.<br>Per poter utilizzare la libreria è necessario caricare il file che la contiene, da locale o<br>
da remoto.<br>Caricamento della libreria da locale:<br>&lt;head&gt;
	&lt;script src="jquery-3.4.1.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
Copy<br>da remoto:<br>&lt;head&gt;
	&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
Copy<br><a data-tooltip-position="top" aria-label="JavaScript/Glossario - jQuery JavaScript" data-href="JavaScript/Glossario - jQuery JavaScript" href="javascript\glossario-jquery-javascript.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>javascript\jquery\la-libreria-jquery-di-javascript.html</link><guid isPermaLink="false">JavaScript/jQuery/La libreria jQuery di JavaScript.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 15:18:08 GMT</pubDate></item><item><title><![CDATA[Metodi]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>Alcuni metodi fondamentali:<br>
<br>hide() - nasconde un oggetto
<br>show() - mostra un oggetto
<br>toggle() - cambia tra mostra/nasconde
<br>slideDown() - menu a discesa, discesa
<br>slideUp() - menu a discesa, salita
<br>slideToggle() - menu a discesa
<br>click() - lega un evento al click sopra l’oggetto
<br>attr() - cambia o recupera il valore di un attributo specificato
<br>css() - modifica il css legato all’oggetto (come se fosse css inline)
<br>Uno dei metodi più utilizzati è ready(), legato a document. Permette difatti di far<br>
eseguire uno script soltanto quando la pagina ha finito di caricarsi, evitando quindi<br>
errori che possono avvenire per esecuzioni prima che certi elementi del DOM<br>
finiscano di essere interpretati.<br>Esempio:<br>$(document).ready(function(){
	console.log("Questo messaggio compare dopo che tutto l'HTML è stato caricato");
});
Copy<br>Il seguente esempio invece mostra come recuperare il valore contenuto in un input di testo alla pressione di un bottone, e stamparlo con un alert:<br>&lt;input id="valore" type="number"&gt;
&lt;input type="submit" id="btn_valore"&gt;
&lt;script&gt;
	$("#btn_valore").click(function(){
		alert("Value: " + $("#valore").val());
	});
&lt;/script&gt;
Copy<br>Tra i diversi metodi utilizzati in jQuery,i metodi per effettuare interrogazioni e<br>
modifiche sono tra i più sfruttati. Questi sono:<br>
<br>text() - ritorna o cambia il valore di un testo contenuto in un elemento
<br>html() - ritorna o cambia il valore HTML contenuto in un dato elemento (comprensivi di eventuali tag)
<br>val() - ritorna o cambia il valore contenuto nel campo di un form
<br>Un altro metodo fondamentale è il metodo css, che permette di verificare e<br>
controllare i valori del css connessi ad un dato tag.<br>
Stampa il colore di sfondo del tag selezionato:<br>alert($("#tag").css("background-color"));
Copy<br>Imposta il colore di sfondo del tag selezionato in rosso:<br>$("#tag").css("background-color","red");
Copy<br>È anche possibile aggiungere o togliere classi definite nel CSS attraverso gli eventi:<br>$("#bottone").click(function(){
	$("h1, h2, p").addClass("giallo");
});
Copy<br>Esempio per togliere:<br>$("#bottone").click(function(){
	$("h1, h2, p").removeClass("giallo");
});
Copy<br>Esempio: tasto che fa scendere un elemento e risalire se ripremuto:<br>&lt;div id="tasto"&gt;Cliccare qua per mostrare/nascondere il pannello&lt;/div&gt;
&lt;div id="pannello"&gt;Ciao sono un pannello&lt;/div&gt;
Copy<br>$(document).ready(function(){
	$("#tasto").click(function(){
		$("#pannello").slideToggle("slow");
	});
});
Copy<br><a data-tooltip-position="top" aria-label="JavaScript/Glossario - jQuery JavaScript" data-href="JavaScript/Glossario - jQuery JavaScript" href="javascript\glossario-jquery-javascript.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>javascript\jquery\metodi.html</link><guid isPermaLink="false">JavaScript/jQuery/Metodi.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 15:18:08 GMT</pubDate></item><item><title><![CDATA[Selettori]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>I selettori di jQuery riprendono da quelli standard del linguaggio CSS. Si utilizzano per poter indicare su quale elemento si intende lavorare. È quindi possibile utilizzare:<br>
<br>per selezionare attraverso un id: #
<br>per selezionare attraverso una classe: .
<br>il nome del tag per selezionare tutti i tag di quel tipo: tag
<br>Esempi: tutti i tag &lt;p&gt;<br>$("p")
Copy<br>Il tag con id ‘prova’:<br>$("#prova")
Copy<br>I tag con classe ‘prova’:<br>$(".prova")
Copy<br>l tag su cui si sta lavorando:<br>$(this)
Copy<br>L’esempio seguente nasconde il tag con ‘id prova’:<br>$("#prova").hide()
Copy<br><a data-tooltip-position="top" aria-label="JavaScript/Glossario - jQuery JavaScript" data-href="JavaScript/Glossario - jQuery JavaScript" href="javascript\glossario-jquery-javascript.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>javascript\jquery\selettori.html</link><guid isPermaLink="false">JavaScript/jQuery/Selettori.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 15:18:08 GMT</pubDate></item><item><title><![CDATA[Tecniche per il caricamento asincrono]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br>Le pagine web moderne sono spesso e volentieri realizzate con tecniche per rendere i contenuti dinamici. Difatti i contenuti di una pagina web variano sulla base di diversi criteri, come ad esempio: account, cookies pubblicitari, periodo della giornata, etc. Diventa quindi necessario dividere in moduli la pagina e cambiarne i contenuti sulla base della chiamata.<br>Tra le possibili tecniche, la più diffusa consiste nell’effettuare chiamate asincrone<br>
attraverso l’uso di Javascript. Questa tecnica è nota col nome di AJAX( Asynchronous Javascript And XML).<br>Nonostante essa sia stata pensata originariamente per l’utilizzo con XML, è possibile<br>
utilizzarla con qualunque formato testuale (attualmente il più diffuso per lo scambio<br>
di dati è il JSON). La stesura di script di chiamata asincrona è complessa e richiede<br>
molte righe di codice (per gestire timing, callback, etc.). jQuery semplifica molto<br>
l’utilizzo di questa tipologia di chiamate e permette con pochissime righe di caricare<br>
contenuti remoti all’interno di una pagina web in qualsiasi momento.<br>Il seguente esempio mostra come caricare una pagina HTML all’interno di uno<br>
specifico tag:<br>
<br>$(document).ready(function(){
	$("#navbar").load("navbar.html");
});
Copy<br>Attenzione: per motivi di sicurezza i browser web bloccano qualunque chiamata<br>
asincrona che non sia legata al protocollo HTTP/HTTPS, in quanto potenzialmente<br>
pericolose. Ciò significa che per la corretta esecuzione di questa tipologia di script<br>
non è possibile operare senza un server web (ad es. Apache contenuto in Xampp).<br>
L’errore che si manifesta in questo caso è il seguente:<br>Bloccata richiesta multiorigine (cross-origin): il<br>
criterio di corrispondenza dell’origine non consente la<br>
lettura della risorsa remota da<br>
file:///C:/xampp/htdocs/4bit1920/navbar.html. Motivo:<br>
richiesta CORS non http.<br><a data-tooltip-position="top" aria-label="JavaScript/Glossario - jQuery JavaScript" data-href="JavaScript/Glossario - jQuery JavaScript" href="javascript\glossario-jquery-javascript.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>javascript\jquery\tecniche-per-il-caricamento-asincrono.html</link><guid isPermaLink="false">JavaScript/jQuery/Tecniche per il caricamento asincrono.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 15:18:08 GMT</pubDate></item><item><title><![CDATA[Glossario - jQuery JavaScript]]></title><description><![CDATA[<a class="tag" href="?query=tag:glossario" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#glossario</a> 
 <br>
<br><a data-href="La libreria jQuery di JavaScript" href="javascript\jquery\la-libreria-jquery-di-javascript.html" class="internal-link" target="_self" rel="noopener">La libreria jQuery di JavaScript</a>
<br><a data-href="Selettori" href="javascript\jquery\selettori.html" class="internal-link" target="_self" rel="noopener">Selettori</a>
<br><a data-tooltip-position="top" aria-label="JavaScript/jQuery/Eventi" data-href="JavaScript/jQuery/Eventi" href="javascript\jquery\eventi.html" class="internal-link" target="_self" rel="noopener">Eventi</a>
<br><a data-href="Metodi" href="javascript\jquery\metodi.html" class="internal-link" target="_self" rel="noopener">Metodi</a>
<br><a data-href="Tecniche per il caricamento asincrono" href="javascript\jquery\tecniche-per-il-caricamento-asincrono.html" class="internal-link" target="_self" rel="noopener">Tecniche per il caricamento asincrono</a>
<br><a data-tooltip-position="top" aria-label="Index" data-href="Index" href="index.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:glossario" class="tag" target="_blank" rel="noopener">#glossario</a> ]]></description><link>javascript\glossario-jquery-javascript.html</link><guid isPermaLink="false">JavaScript/Glossario - jQuery JavaScript.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 15:19:02 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Array" href="about:blank#Array" class="internal-link" target="_self" rel="noopener">Array</a>
<br><a data-href="#Array Numerici" href="about:blank#Array_Numerici" class="internal-link" target="_self" rel="noopener">Array Numerici</a>
<br><a data-href="#Array Associativi" href="about:blank#Array_Associativi" class="internal-link" target="_self" rel="noopener">Array Associativi</a>
<br><a data-href="#Array Multidimensionali" href="about:blank#Array_Multidimensionali" class="internal-link" target="_self" rel="noopener">Array Multidimensionali</a>
<br><br>Un array è un tipo speciale di dato che può memorizzare un numero predefinito di valori in una variabile sola. Quando si ha a che fare con una lista di oggetti (nomi, numeri, indirizzi, etc...) l'array è la variabile da usare:<br>$name1 = “Andrea”;
$name2 = “Silvia”;
$name3 = “Alessia”;
Copy<br>In questo esempio si utilizzano 3 variabili diverse per memorizzare 3 nomi. Ma se i nomi fossero stati 300? Se dovessimo fare una ricerca tra tutti i nomi per trovare ad esempio quelli che iniziano per “S”? La soluzione in tutti questi casi è quella di utilizzare un array. Con quello infatti, tutte le variabili sono accessibile tramite il solo nome dell'array e sono differenziate solo dall'indice, che indica la loro posizione all'interno dell'array. <br>$names = array(“Andrea”, “Silvia”, “Alessia”, “Gianmarco” );
Copy<br>In PHP esistono tre tipi di array:<br>
<br>Numerici: sono array con indice numerico, ove quindi gli elementi sono numerati.
<br>Associativi: sono array in cui l'indice è un ID di un qualunque tipo
<br>Multidimensionali: Sono array contenenti uno o più array
<br><br>Un array è numerico quando i suoi elementi si distinguono tramite un indice numerico. Ci sono due<br>
modi per crearne uno:<br>
<br>
con una dichiarazione implicita: 
$names = array(“Andrea”, “Silvia”, “Alessia”, “Gianmarco” );
Nel cui caso la numerazione è progressiva e parte da zero.

<br>
con una dichiarazione esplicita:<br>
$names[0] = “Andrea”;<br>
$names[1] = “Silvia”;<br>
$names[2] = “Alessia”;<br>
$names[3] = “Gianmarco”;
In cui si specifica ogni valore per ogni posizione che si vuole occupare

<br>Dichiarato un array, si possono utilizzare i valori ivi contenuti semplicemente riferendosi al suo indice:<br>$names = array(“Andrea”, “Silvia”, “Alessia”, “Gianmarco” );
echo $names[0] . “ è il mio nome”;
Copy<br><br>In un array associativo, ogni valore è associato ad un ID unico, che può essere un qualsiasi tipo. Con gli array associativi, si possono utilizzare i valori come chiavi e assegnarli dei valori, come nell'esempio seguente:<br>$eta = array(“Alessia” =&gt; 7, “Gianmarco”=&gt; 3)<br>Così è possibile utilizzare i nomi come chiavi e le età come valori dell'array, che potranno essere riutilizzati in questo modo:<br>$nome = “Alessia”;
echo $nome.”ha .”$eta[$nome].” anni”;
Copy<br>Questo codice visualizza come output la scritta<br>Alessia ha 7 anni<br><br>Negli array multidimensionali, ogni elemento dell'array può essere anche un array esso stesso. Inoltre anche ogni elemento del sotto array può essere un array e così via.<br>$famiglieFamose = array(
	“Fantozzi”=&gt;array(“Ugo”, “Pina”, “Mariangela”),
	“Flintstones”=&gt;array(“Fred”, “Wilma”, “Ciotolina”),
	“Addams”=&gt;array(“Gomez”, ”Morticia”, ”Mercoledì”, ”Pugsley”)
);
Copy<br>L'array famiglieFamose contiene 3 array che contengono ognuna alcune stringhe. Per accedere al nome del primo elemento della famiglia Flintstones dovremo semplicemente scrivere:<br>echo $famiglieFamose[ 'Flinstones' ][0];<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\array.html</link><guid isPermaLink="false">PHP/Introduzione/Array.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 09:02:32 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Funzioni PHP" href="about:blank#Funzioni_PHP" class="internal-link" target="_self" rel="noopener">Funzioni PHP</a>
<br><a data-href="#Funzioni per data e ora" href="about:blank#Funzioni_per_data_e_ora" class="internal-link" target="_self" rel="noopener">Funzioni per data e ora</a>
<br><br>La reale forza del PHP si scopre studiando le 700 e più funzioni predefinite di cui dispone e che gli permettono di intervenire con semplicità in praticamente tutti gli aspetti di interazione con la rete, con i dati e i database e con la macchina su cui questo codice viene eseguito. Come prima introduzione all'argomento si vedrà come è possibile in PHP creare una propria funzione per eseguire un compito prestabilito, così da familiarizzare con la sintassi e essere subito pronti per una migliore organizzazione del codice.<br>La sintassi di definizione delle funzioni PHP è la seguente:<br>funzione NomeFunzione( $parametri ){
	codice da eseguire;
}
Copy<br>E' importante utilizzare dei nomi per le funzioni che riflettano il suo reale comportamento, in modo da orientarsi meglio fra tutte quelle che si finirà solitamente ad usare scrivendo codice PHP. L'unica regola da ricordare è che come tutti gli identificatori, il nome di una funzione deve cominciare con una lettera o un underscore, non con un numero!<br>Per eseguire il codice di una funzione, bisognerà utilizzare una chiamata alla funzione stessa, effettuabile tramite il suo nome, seguito da parentesi, più eventuali parametri:<br>NomeFunzione();<br>Vediamo subito un esempio di una funzione molto semplice:<br>&lt;?php
function scriviNome(){
	echo "Andrea Diamantini";
}
echo "Il mio nome e' ";
scriviNome();
?&gt;
Copy<br>Vediamo adesso un esempio in cui si passano alcuni parametri ad una funzione:<br>function scriviDati($nome, $cognome){
	echo “Mi chiamo”.$nome.” “.$cognome;
}
scriviDati(“Pinco”, “Pallino”);
$n=”Paolo”;
$c=”Rossi”;
scriviDati($n,$c);
Copy<br>Per permettere alle funzioni di ritornare un valore è necessario utilizzare l'istruzione return:<br>function somma($a,$b){
	$sum=$a+$b;
	return $sum;
}
$primo = 4;
$secondo = 7;
echo “La somma di “.$primo.” e “.$secondo.” porta “.somma($primo, $secondo);
Copy<br><br>La funzione PHP date() viene utilizzata per formattare un orario e/o una data, ricreando un opportuno timestamp, cioè una opportuna sequenza di caratteri utilizzata per denotarne il formato (es: gg/mm/aa).<br>La sintassi della funzione date() è semplicissima:<br>date(format, timestamp)
Copy<br><br>Il parametro format specifica come visualizzare data/ora. Vediamo tutti i parametri che può prendere:<br>d    Due cifre per il giorno del mese (da 01 a 31)<br>
D   Tre lettere per rappresentare un giorno (Mon, Tue, Wed, Thu, Fri, Sat, Sun)<br>
j     Il giorno del mese, senza zeri eccedenti (da 1 a 31)<br>
l     ('L' minuscola) Rappresentazione testuale del giorno<br>
N   La rappresentazione ISO 8601 del giorno (1 = lunedì, 2 = martedì, etc..)<br>
S    Il suffisso ordinale Inglese adatto al giorno (2 caratteri, st, nd, rd, th)<br>
w   Rappresentazione numerica del giorno (0 = domenica, 1 = lunedì, etc...)<br>
z    Il giorno dell'anno (da 0 a 365)<br>
W  Il numero della settimana dell'anno secondo ISO 8601<br>
F   Rappresentazione testuale del mese<br>
m  Rappresentazione numerica del mese (da 01 a 12)<br>
M  Rappresentazione testuale breve del mese (3 lettere)<br>
n   Rappresentazione numerica del mese (da 1 a 12)<br>
t    Il numero del giorno per il mese<br>
L   Anno bisestile (1 sì, 0 no)<br>
o   Il numero dell'anno secondo lo standard ISO 8601<br>
Y   Rappresentazione dell'anno con 4 cifre<br>
y   Rappresentazione dell'anno con 2 cifre<br>
a   am o pm minuscoli<br>
A   AM o PM maiuscoli<br>
B   Swatch Internet time (da 000 a 999)<br>
g   Ora del giorno (da 1 a 12)<br>
G   Ora del giorno (da 0 a 23)<br>
h   Ora del giorno (da 01 a 12)<br>
H   Ora del giorno (da 00 a 23)<br>
i     Minuti (da 00 a 59)<br>
s    Secondi (da 00 a 59)<br>
e   timezone identifier (UTC, Atlantic/Azores, etc..)<br>
I    (i maiuscola) Ora legale (1 = ora legale, 0 = ora solare)<br>
O   Differenza in ore dall'ora di Greenwich (GMT)<br>
T    Timezone della macchina che esegue il PHP<br>
Z    Differenza in secondi dall'ora di Greenwich (GMT)<br>
c    Data ISO 8601 (esempio: 2004-02-12T15:19:21+00:00)<br>
r    Data RFC 2822 (esempio: Thu, 21 Dec 2000 16:01:07 +0200)<br>
U   Secondi trascorsi dalla Unix Epoch (January 1 1970 00:00:00 GMT)<br>Il parametro opzionale timestamp serve a specificarne uno invece di usare quello per data e ora corrente. Il comando UNIX mktime() restituisce il timestamp per una data, corrispondente al numero di secondi tra la “UNIX Epoch” (January 1 1970 00:00:00 GMT) e il tempo specificato.<br>mktime(ore,minuti,secondi,mesi,giorni,anni, bisestile)<br>Vediamo dunque alcuni esempi di utilizzo della funzione date() e della funzione mktime().<br>&lt;?php
	$tomorrow = mktime(0,0,0,date("m"),date("d")+1,date("Y"));
	echo "Domani è ".date("Y/m/d", $tomorrow);
?&gt;
Copy<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\funzioni-php.html</link><guid isPermaLink="false">PHP/Introduzione/Funzioni PHP.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 09:38:10 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Gestione dei Form con PHP" href="about:blank#Gestione_dei_Form_con_PHP" class="internal-link" target="_self" rel="noopener">Gestione dei Form con PHP</a>
<br><a data-href="#Esercizi" href="about:blank#Esercizi" class="internal-link" target="_self" rel="noopener">Esercizi</a>
<br><br>Le variabili PHP $_GET e $_POST sono utilizzate per reperire le informazioni inserite nei form<br>
HTML. Queste due variabili predefinite sono infatti due array associativi che contengono automaticamente ogni informazione inviata da un form HTML rispettivamente tramite metodo GET e POST. Vediamo un banale esempio di form e gestione dei dati tramite PHP:<br>&lt;form action="welcome.php" method="post"&gt;
	Nome: &lt;input type="text" name="name" /&gt;
	Cognome: &lt;input type="text" name="surname" /&gt;
	&lt;input type="submit" /&gt;
&lt;/form&gt;
Copy<br>le informazioni saranno inviate al click sul submit alla pagina welcome.php, che deve essere presente nella stessa directory ove questo codice viene implementato:<br>Benvenuto, &lt;?php echo $_POST["name"].” “.$_POST["surname"]; ?&gt;.
Copy<br>La validazione dei form, come ad esempio il controllo dei campi vuoti o dei campi mail o data, dovrebbe essere effettuata tramite scripts lato client (ad esempio tramite javascript).<br>
Questo per incrementare la velocità di elaborazione e ridurre il carico dei server.<br>La variabile $_GET si usa in maniera analoga per reperire i valori inviati da un form tramite method=”get”. La differenza fra i metodi di invio GET e POST è che mentre i valori in una connessione POST sono inviati nascosti, quelli in una connessione GET sono appiccicati all'URL di invio (specificato nell'attributo action del form). Così in una situazione analoga alla precedente, ma con metodo GET specificato:<br>&lt;form action="http://thissite.com/welcome.php" method="get"&gt;
	Nome: &lt;input type="text" name="name" /&gt;
	Cognome: &lt;input type="text" name="surname" /&gt;
	&lt;input type="submit" /&gt;
&lt;/form&gt;
Copy<br>Le informazioni scritte nel form sono inviate tramite il seguente URL:<br>
<a rel="noopener" class="external-link" href="http://thissite.com/welcome.php?name=pinco&amp;surname=pallino" target="_blank">http://thissite.com/welcome.php?name=pinco&amp;surname=pallino</a><br>Ovviamente il metodo GET non è adatto per l'invio di dati strettamente riservati o password. E non è inoltre in grado di gestire trasferimenti contenenti più di 100 bytes di informazioni.<br><br>
<br>Form per l'inserimento dei dati personali e relativa visualizzazione dei dati inviati
<br>Creazione di una pagina web per la ricerca di un valore su Google
<br>Autenticazione (nome utente e password) su una pagina web con controllo dei dati
<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\gestione-dei-form-con-php.html</link><guid isPermaLink="false">PHP/Introduzione/Gestione dei FORM con PHP.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 09:22:56 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Introduzione" href="about:blank#Introduzione" class="internal-link" target="_self" rel="noopener">Introduzione</a>
<br><a data-href="#Sintassi Base del PHP" href="about:blank#Sintassi_Base_del_PHP" class="internal-link" target="_self" rel="noopener">Sintassi Base del PHP</a>
<br><a data-href="#Variabili" href="about:blank#Variabili" class="internal-link" target="_self" rel="noopener">Variabili</a>
<br><a data-href="#Variabili Stringa" href="about:blank#Variabili_Stringa" class="internal-link" target="_self" rel="noopener">Variabili Stringa</a>
<br><a data-href="#Operatori PHP" href="about:blank#Operatori_PHP" class="internal-link" target="_self" rel="noopener">Operatori PHP</a>
<br><br>PHP è un acronimo ricorsivo che significa PHP: Hypertext Preprocessor. Quindi il PHP è un preprocessore di ipertesti, nel senso che l'elaborazione del codice PHP produce in output un codice HTML puro. O almeno questo è lo scopo per cui questo linguaggio è nato e la sua funzione principale. PHP è un linguaggio di programmazione web lato server, è un linguaggio di scripting con un buon<br>
interprete e una forte predisposizione all'interfacciamento con i database (MySQL, Informix, Oracle, Sybase, Solid, PostgreSQL, Generic ODBC, etc.). L'interprete e il linguaggio PHP sono software e specifiche aperti e liberi di essere scaricati e utilizzati, oltreché cross-platform (è possibile ad esempio sviluppare su windows una applicazione web in php destinata alla produzione su macchine UNIX/Linux).<br><br>Il codice PHP viene eseguito sul server e restituisce in output stringhe html pure da essere inviate al browser. Un blocco di script PHP inizia sempre con &lt;?php e finisce sempre con ?&gt; e può essere posto ovunque all'interno del documento.<br>
Un file .php può inoltre contenere semplice codice html fuori dai blocchi degli script che rimarranno invariati nell'interpretazione del codice. Vediamo un primo esempio di codice con un file html con scritto solo il classico “Hello, World!”<br>&lt;html&gt;
	&lt;body&gt;
		&lt;?php
			echo "Hello World";
		?&gt;
	&lt;/body&gt;
&lt;/html&gt;
Copy<br>Ogni linea in PHP termina con un punto e virgola, che funziona anche da separatore di comandi. I file PHP devono avere estensione .php, altrimenti l'interprete non li riconoscerà come tali e il codice PHP rimarrà ignorato.<br>I commenti lungo il codice PHP seguono la stessa sintassi del C/C++<br>&lt;?php
//commento di linea
/*
Questo è un blocco di
commenti (lungo quanto
vi pare!!!
*/
?&gt;
Copy<br>I comandi di base per scrivere output di testo in PHP sono due: echo e print. Il comando echo è lo stesso utilizzato nel nostro primo esempio.<br><br>Le variabili si utilizzano per memorizzare informazioni, come stringhe numeri o insiemi di queste. Quando se ne dichiara una può essere utilizzata per tutta la lunghezza di uno script. È molto semplice individuare una variabile in una porzione di codice PHP, perché tutti i nomi di variabile devono iniziare con $. Il modo corretto di dichiarare una variabile è dunque:<br>$variabile = valore;
Copy<br>Vediamo adesso un esempio di codice in cui vengono dichiarate una variabile contenente un numero ed una contenente una stringa:<br>&lt;?php
	$txt = "Hello World!";
	$x = 16;
?&gt;
Copy<br>Il PHP è uno dei linguaggi comunemente definiti Loosely Typed. Questo significa che non c'è bisogno di dichiarare una variabile prima di utilizzarla e che il PHP converte automaticamente la variabile al tipo corretto di dato, a seconda del valore inserito. In un linguaggio Strongely Typed, come il C ad esempio, è necessario dichiarare il nome e il tipo di una variabile prima di poterla utilizzare.<br><br>
<br>devono iniziare con una lettera dell'alfabeto o con underscore
<br>possono contenere solo numeri, lettere e underscore
<br>non possono contenere spazi
<br><br>Le variabili stringa sono utilizzate per memorizzare e manipolare il testo. Vediamo innanzitutto un semplice esempio di dichiarazione e utilizzo:<br>&lt;?php
	$txt = "Hello World";
	echo $txt;
?&gt;
Copy<br>Questo semplice script dichiara la variabile $txt, gli assegna il valore “Hello World” e poi visualizza il contenuto della variabile.<br>L'operatore di concatenazione (.) viene utilizzato per mettere insieme più valori.<br>&lt;?php
	$txt1 = "Hello World!";
	$txt2 = "What a nice day!";
	echo $txt1 . " " . $txt2;
?&gt;
Copy<br>L'esempio illustrato dichiara due variabili e poi le visualizza concatenate con in mezzo uno spazio “ “. Questo è dunque un operatore semplicissimo da usare e spesso utile per costruire le frasi da visualizzare in output. La funzione strlen() calcola il numero di caratteri di una stringa. Il seguente esempio di codice<br>
restituisce 12, il numero di caratteri di cui è composta la stringa “Hello world!”.<br>&lt;?php
	echo strlen("Hello world!");
?&gt;
Copy<br>Questa funzione viene molto utilizzata quando in un ciclo si vuole scorrere una stringa carattere per carattere, operando su ognuno di questi. La funzione strpos() è utilizzata per cercare caratteri o stringhe all'interno di una stringa. Se la ricerca<br>
ha esito positivo, la funzione restituisce la posizione numerica della prima occorrenza trovata, altrimenti restituisce FALSE.<br>&lt;?php
	echo strpos("Hello world!","world");
?&gt;
Copy<br>Questo esempio di codice visualizza il numero 6, che è la posizione del primo carattere (partendo da<br>
zero) della prima occorrenza della stringa “world”.<br><br>Gli operatori di un linguaggio vengono utilizzati per lavorare sui valori. Vediamo una lista completa degli operatori disponibili in PHP:<br><br><br><br><br><br><br><br><br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\introduzione.html</link><guid isPermaLink="false">PHP/Introduzione/Introduzione.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 12:20:32 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Istruzioni condizionali" href="about:blank#Istruzioni_condizionali" class="internal-link" target="_self" rel="noopener">Istruzioni condizionali</a>
<br><a data-href="#La struttura if" href="about:blank#La_struttura_if" class="internal-link" target="_self" rel="noopener">La struttura if</a>
<br><a data-href="#La struttura if...else" href="about:blank#La_struttura_if...else" class="internal-link" target="_self" rel="noopener">La struttura if...else</a>
<br><a data-href="#La struttura if...elseif...else" href="about:blank#La_struttura_if...elseif...else" class="internal-link" target="_self" rel="noopener">La struttura if...elseif...else</a>
<br><a data-href="#La struttura switch" href="about:blank#La_struttura_switch" class="internal-link" target="_self" rel="noopener">La struttura switch</a>
<br><a data-href="#Esercizi" href="about:blank#Esercizi" class="internal-link" target="_self" rel="noopener">Esercizi</a>
<br><br>Le istruzioni condizionali sono utilizzate per eseguire azioni diverse a seconda delle condizioni che si verificano. Il PHP supporta le seguenti strutture condizionali:<br>
<br>Struttura if: utilizzata per eseguire codice solo se si verifica una condizione.
<br>Struttura if...else: utilizzata per eseguire determinate istruzioni se una condizione si verifica e altre altrimenti.
<br>Struttura if...elseif....else: questo blocco supporta la scelta fra varie opzioni.
<br>Struttura switch: analogo al precedente, ma (forse) con una migliore organizzazione dei blocchi di codice
<br><br>La struttura if viene utilizzata per eseguire una porzione di codice solo se una specificata condizione risulta vera.<br>if (condizione) {
	codice da eseguire
}
Copy<br>Vediamo un esempio in cui se il giorno corrente è Lunedì, viene visualizzata una scritta di buon inizio settimana<br>$d = date("D");
if ($d=="Mon") {
	echo "Buon inizio settimana!”;
}
Copy<br><br>La struttura if...else si utilizza per decidere quale codice eseguire a seconda che una condizione specificata sia vera oppure falsa.<br>if(condizione) {
	codice per condizione vera
} else {
	codice per condizione falsa
}
Copy<br>il seguente esempio dice se un numero è pari oppure dispari, calcolando il resto della divisione per 2:<br>$d = 3;
if($d % 2 == 0){
	echo "pari";
}
else{
	echo "dispari";
}
Copy<br><br>Questa struttura permette di gestire diversi blocchi di codice scegliendone uno da eseguire in base ai valori delle condizioni specificate.<br>if (condizione 1){
	codice condizione 1 vera
}elseif (condizione 2){
	codice condizione 2 vera
}else{
	codice condizione 2 falsa
}
Copy<br>L'esempio seguente augura buon weekend agli utenti che lo eseguono di venerdì, “Buona domenica” a quelli che lo eseguono di domenica, “Buona Giornata” in tutti gli altri momenti<br>$d = date("D");
if($d=="Fri"){
	echo "Buon weekend!";
}elseif ($d=="Sun"){
	echo "Buona Domenica!";
}else{
	echo "Buona giornata!";
}
Copy<br><br>La struttura switch viene utilizzata per eseguire diverse porzioni di codice a seconda del valore di una<br>
determinata variabile in esame.<br>switch($variabile){
	case $valore1:
		blocco codice 1;
		break;
	case $valore2:
		blocco codice 2;
		break;
	...
	default:
		blocco codice default;
}
Copy<br>La struttura switch controlla il valore della variabile in esame. Se $variabile == $valore1, allora viene eseguita la prima porzione di codice e poi si esce dal blocco switch, effetto ottenuto tramite l'esecuzione dell'istruzione break. Se $variabile == $valore2, allora viene eseguita la seconda porzione di codice e poi si esce dal blocco switch. Così via per tutti i valori presenti. Se $variabile non è uguale a nessuno dei valori specificati, si esegue il blocco default.<br>
Vediamo un esempio in cui si utilizza lo switch:<br>switch ($n){
	case 1:
		echo "Numero 1";
		break;
	case 2:
		echo "Numero 2";
		break;
	case 3:
		echo "Numero 3";
		break;
	default:
		echo "Il numero non è fra 1 e 3”;
}
Copy<br><br>Creare una pagina HTML contenente una serie di link ad altrettante pagine PHP, ognuna avente come output uno degli esercizi qui proposti:<br>
<br>Dato un numero verificare se è pari o dispari
<br>Scambiare due valori fra loro (ordinare due valori)
<br>Determinare il maggiore fra tre numeri.
<br>Ordinare tre valori
<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\istruzioni-condizionali.html</link><guid isPermaLink="false">PHP/Introduzione/Istruzioni condizionali.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Wed, 14 Feb 2024 12:34:33 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Istruzioni Iterative" href="about:blank#Istruzioni_Iterative" class="internal-link" target="_self" rel="noopener">Istruzioni Iterative</a>
<br><a data-href="#Il ciclo while" href="about:blank#Il_ciclo_while" class="internal-link" target="_self" rel="noopener">Il ciclo while</a>
<br><a data-href="#Il ciclo do...while" href="about:blank#Il_ciclo_do...while" class="internal-link" target="_self" rel="noopener">Il ciclo do...while</a>
<br><a data-href="#Il ciclo for" href="about:blank#Il_ciclo_for" class="internal-link" target="_self" rel="noopener">Il ciclo for</a>
<br><a data-href="#Il ciclo foreach" href="about:blank#Il_ciclo_foreach" class="internal-link" target="_self" rel="noopener">Il ciclo foreach</a>
<br><a data-href="#Esercizi" href="about:blank#Esercizi" class="internal-link" target="_self" rel="noopener">Esercizi</a>
<br><br>Le iterazioni sono esecuzioni consecutive di un blocco di codice per un numero (possibilmente) finito di volte.<br>In PHP si hanno i seguenti costrutti sintattici per implementare delle interazioni:<br>
<br>while - ripete un blocco di codice finché una (pre)condizione specificata è vera.
<br>do...while - ripete un blocco di codice finché una (post)condizione specificata è vera.
<br>for - ripete un blocco di codice per un numero specificato di volte.
<br>foreach - ripete un blocco di codice per ogni elemento di un array
<br><br>Il ciclo while controlla prima una condizione specificata e poi inizia a ripetere un blocco di codice, finché la condizione risulta vera. Questo significa che se la condizione è inizialmente falsa il blocco di codice non viene eseguito neanche una volta!!<br>while(condizione){
	blocco di codice
}
Copy<br>Vediamo un esempio di utilizzo di questo costrutto molto comune:<br>$i=1;
while($i&lt;=5){
	echo "Numero " . $i . "&lt;br /&gt;";
	$i++;
}
Copy<br>che visualizza 5 scritte con i numeri che vanno da 1 a 5.<br><br>Il ciclo do...while esegue prima una iterazione del blocco di codice e poi controlla una condizione specificata, iniziando a ripetere il blocco, finché la condizione risulta vera. Questo significa che anche se la condizione è inizialmente falsa il blocco di codice viene eseguito almeno una volta!!<br>do{
	blocco di codice
}while(condizione);
Copy<br>Vediamo un esempio di utilizzo di questo costrutto, che è solitamente poco utilizzato se non in casi particolari in cui la condizione controlla dei valori che vengono assegnati durante l'esecuzione del blocco.<br>$numero=0;
do{
	$numero+=3;
}while($numero&lt;10);
echo $numero;
Copy<br>che cosa visualizzerà questo codice come output?<br><br>Il ciclo for si utilizza quando è noto a priori il numero di iterazioni che devono essere eseguite su un blocco di codice.<br>for( init, condizione, incremento){
	blocco di codice
}
Copy<br>Di solito il ciclo for è molto apprezzato per la sua sintassi compatta e per la chiarezza della sua condizione. Vediamo un esempio in cui ripeteremo una frase per 10 volte:<br>for($i=1; $i&lt;=10;$i++){
	echo “ciao&lt;br /&gt;”;
}
Copy<br><br>Il ciclo foreach viene utilizzato per eseguire un blocco di codice per tutti gli elementi di un array:<br>foreach( $array as $value){
	blocco di codice con $value;
}
Copy<br>Per ogni iterazione del ciclo, la variabile $value assume uno alla volta tutti i valori di ogni elemento dell'array.<br>$colori = array(“rosso”, “giallo”, “verde”, “blu” );
foreach ($colori as $c){
	echo “colore “.$c.” &lt;br /&gt;”;
}
Copy<br><br>Creare una pagina HTML contenente una serie di link ad altrettante pagine PHP, ognuna avente come<br>
output uno degli esercizi qui proposti:<br>
<br>Il minimo e massimo di un assegnato vettore di numeri interi,
<br>La somma e la media aritmetica di un assegnato vettore di numeri interi,
<br>Un vettore di numeri interi nell'ordine inverso rispetto a quello in cui è assegnato,
<br>Un vettore di numeri interi seguiti ciascuno dagli aggettivi "grande" e "piccolo" a seconda che tali numeri siano rispettivamente maggiori, o minori, di 10.
<br>Una tabella con sei colonne e venti righe, con ciascuna delle 120 caselle contenente la dicitura "riga x, colonna y" con x e y opportunamente sostituiti dalla posizione della casella nella tabella,
<br>una tabella contenente una matrice assegnata di interi,
<br>una tabella contenente la matrice trasposta (ottenuta, cioè scambiando righe e colonne) di una matrice assegnata di interi
<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\istruzioni-iterative.html</link><guid isPermaLink="false">PHP/Introduzione/Istruzioni iterative.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 09:17:32 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#PHP e DATABASE" href="about:blank#PHP_e_DATABASE" class="internal-link" target="_self" rel="noopener">PHP e DATABASE</a>
<br><a data-href="#Database e ODBC" href="about:blank#Database_e_ODBC" class="internal-link" target="_self" rel="noopener">Database e ODBC</a>
<br><br>Il linguaggio PHP è notoriamente in grado di assicurare una semplice interazione con i database. Ma, se questo discorso è vero in generale, vale ancora di più per il database server MySQL, con cui si sposa in maniera semplice, veloce ed efficasissima.<br>
La loro “intesa di coppia” è talmente buona e testata, che da anni dominano insieme la scena del Web, come linguaggio di scripting e database più diffuso della Rete.<br>
Per interagire con un database MySQL, bisogna prima di tutto creare una connessione, tramite la funzione mysql_connect().<br>mysql_connect( servername , username , password );
Copy<br><br>Vediamo subito un esempio di connessione, il cui risultato viene memorizzato in una variabile e in cui la seconda parte dello script provoca una interruzione immediata dello stesso qualora la connessione non andasse a buon fine.<br>&lt;?php
	$con = mysql_connect("localhost","andrea","abc123");
	if (!$con){
		die('Impossibile Connettersi: ' . mysql_error());
	}
	...
?&gt;
Copy<br>La connessione verrà chiusa automaticamente alla fine dello script. Per chiuderla prima, sarà<br>
necessario utilizzare la funzione mysql_close();<br>mysql_close($con);
Copy<br>Quando la connessione con il database server è attiva, è possibile interagire con questo tramite il linguaggio SQL e la funzione PHP mysql_query() che esegue sul DB server il codice SQL inserito come argomento.<br>
Ad esempio sarà possibile, se l'utente con cui siamo connessi ne ha diritto, creare un database con questo semplice comando:<br>&lt;?php
	$con = mysql_connect("localhost","andrea","abc123");
	if (!$con){
		die('Connessione impossibile: ' . mysql_error());
	}
	if ( mysql_query( "CREATE DATABASE mioDb" , $con) ){
		echo "Creato Database mioDb";
	}else{
		echo "Errore nella creazione del database: " . mysql_error();
	}
	...
	mysql_close($con);
?&gt;
Copy<br>Un database può poi contenere una o più tabelle, che possono essere create in maniera del tutto analoga con l'istruzione mysql_query().<br>
Per assicurarsi però di creare le tabelle sul database appena creato, occorrerà selezionarlo con l'istruzione mysql_select_db().<br>// Create table
mysql_select_db("mioDb", $con);
$sql = "CREATE TABLE Persona
(
personID int NOT NULL AUTO_INCREMENT,
PRIMARY KEY(personID),
Nome varchar(15),
Cognome varchar(15),
Anni int
)";
// Execute query
mysql_query( $sql , $con );
Copy<br>Per inserire nuovi record dentro una tabella si procede con l'istruzione SQL INSERT .<br>...
mysql_query("INSERT INTO Persona (Nome, Cognome, Anni)
VALUES ('Peter', 'Griffin', '35')");

mysql_query("INSERT INTO Persona (Nome, Cognome, Anni)
VALUES ('Glenn', 'Quagmire', '33')");
...

Copy<br>Ecco un semplice esempio di come un Form HTML può essere utilizzato per inserire dati dentro un<br>
Database:<br><br>&lt;html&gt;
	&lt;body&gt;
		&lt;form action="insert.php" method="post"&gt;
			nome: &lt;input type="text" name="nome" /&gt;
			cognome: &lt;input type="text" name="cognome" /&gt;
			&lt;input type="submit" /&gt;
		&lt;/form&gt;
	&lt;/body&gt;
&lt;/html&gt;
Copy<br><br>&lt;?php
	$con = mysql_connect("localhost","andrea","abc123");
	if( !$con ){
		die('Impossibile connettersi: ' . mysql_error());
	}
	mysql_select_db( "mioDb" , $con );
	$sql="INSERT INTO Persone (Nome, Cognome)
	VALUES
	('$_POST[nome]','$_POST[cognome]')";
	if( !mysql_query( $sql , $con ) ){
		die('Errore: ' . mysql_error());
	}
	echo "Aggiunto 1 record";
	mysql_close( $con );
?&gt;
Copy<br>Il comando SQL SELECT viene utilizzato per selezionare dati da un database. Come già detto, il comando per eseguire comandi SQL su database MySQL è l'istruzione mysql_query(), con la differenza in questo caso specifico che il comando restituirà il risultato della query che sarà da memorizzare in una nuova variabile.<br>
Da questo risultato sarà possibile estrarre una riga per volta tramite il comando mysql_fetch_array(). Ognuna delle righe della tabella così ottenute sarà un array associativo con indici dei campi i nomi delle colonne corrispettive nella tabella SQL. Sarà dunque semplice estrarre i dati per il trattamento e la visualizzazione.<br>
Nell'esempio seguente vediamo un esempio di esecuzione di query sul database e successiva visualizzazione dei dati.<br>&lt;?php
	$con = mysql_connect("localhost","andrea","abc123");
	if (!$con){
		die('Impossibile connettersi: ' . mysql_error());
	}
	mysql_select_db("mioDb", $con);
	$risultato = mysql_query("SELECT * FROM Persone");
	while( $row = mysql_fetch_array($risultato) ){
		echo $row['nome'] . " " . $row['cognome'];
		echo "&lt;br /&gt;";
	}
	mysql_close($con);
?&gt;
Copy<br><br>ODBC è l'acronimo di Open Data Base Connectivity ed è un API per la connessione ad una sorgente dati. Tramite ODBC è possibile connettersi a qualunque tipo di fonte per i dati della propria applicazione, da un database nel server MS SQL, ad un database MySQL, fino ad un database MS Access e perfino ad un foglio elettronico.<br>
Per creare una connessione ODBC è necessario utilizzare i tools che il proprio sistema operativo offre, come quelli presenti nel Pannello di Controllo dei sistemi Windows o agli ODBC tools presenti negli altri sistemi operativi.<br>La connessione PHP ad una risorsa ODBC si effettua tramite la funzione odbc_connect(), che prende 4 parametri in ingresso.<br>odbc_connect( source_name , username , password , cursor_type );
Copy<br>Analogamente, la funzione odbc_exec() viene utilizzata per eseguire una istruzione SQL su una connessione ODBC attiva.<br>$conn = odbc_connect( 'northwind' , '' , '' );
$sql = "SELECT * FROM customers";
$rs = odbc_exec( $conn , $sql );
Copy<br>La variabile PHP $rs conterrà il risultato della query, che sarà una tabella creata con i dati risultanti dall'esecuzione del codice SQL. Per selezionare una riga da suddetta tabella, dovremo utilizzare il comando odbc_fetch_row().<br>odbc_fetch_row( $rs );
Copy<br>Analogamente, per ottenere i campi dalla riga selezionata, dovremo utilizzare il comando<br>
odbc_result(), che lavora nei modi seguenti:<br>$primo = odbc_result( $rs , 1 );
Copy<br>assegna alla variabile di output il valore presente nel primo campo della riga selezionata.<br>$name = odbc_result( $rs , "Name" );
Copy<br>assegna alla variabile di output il valore presente nel campo di nome “Name” della riga selezionata.<br>Quando alla fine si vuole chiudere una connessione con la risorsa ODBC, è sufficiente utilizzare il comando odbc_close():<br>odbc_close( $conn );
Copy<br>Vediamo infine un esempio di come creare una connessione ad una risorsa ODBC di nome<br>
ProvaODBC, ottenere dati dalla sua tabella “tabClienti” e visualizzarli in una tabella HTML.<br>&lt;html&gt;
	&lt;body&gt;
		&lt;?php
			$conn = odbc_connect('ProvaODBC','','');
			if ( !$conn ){
				exit("Connessione NON riuscita: " . $conn);
			}
			$sql = "SELECT * FROM tabClienti";
			$rs = odbc_exec( $conn , $sql );
			if( !$rs ) {
				exit("Errore nel codice SQL"); 
			}
			echo "&lt;table&gt;&lt;tr&gt;";
			echo "&lt;th&gt;Nome&lt;/th&gt;";
			echo "&lt;th&gt;Cognome&lt;/th&gt;&lt;/tr&gt;";
			while ( odbc_fetch_row( $rs ) ) {
				$nome = odbc_result( $rs , "nome" );
				$cognome = odbc_result( $rs ,"cognome" );
				echo "&lt;tr&gt;&lt;td&gt;$nome&lt;/td&gt;";
				echo "&lt;td&gt;$cognome&lt;/td&gt;&lt;/tr&gt;"; 
			}
			odbc_close( $conn );
			echo "&lt;/table&gt;";
		?&gt;
	&lt;/body&gt;
&lt;/html&gt;
Copy<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\php-e-database.html</link><guid isPermaLink="false">PHP/Introduzione/PHP e DATABASE.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 19 Feb 2024 07:37:10 GMT</pubDate></item><item><title><![CDATA[Indice]]></title><description><![CDATA[<a class="tag" href="?query=tag:teoria" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#teoria</a> 
 <br><br>
<br><a data-href="#Tecniche avanzate con PHP" href="about:blank#Tecniche_avanzate_con_PHP" class="internal-link" target="_self" rel="noopener">Tecniche avanzate con PHP</a>
<br><a data-href="#Server Side Includes (SSI)" href="about:blank#Server_Side_Includes_(SSI)" class="internal-link" target="_self" rel="noopener">Server Side Includes (SSI)</a>
<br><a data-href="#Gestione File" href="about:blank#Gestione_File" class="internal-link" target="_self" rel="noopener">Gestione File</a>
<br><a data-href="#File upload" href="about:blank#File_upload" class="internal-link" target="_self" rel="noopener">File upload</a>
<br><a data-href="#Gestione Cookies" href="about:blank#Gestione_Cookies" class="internal-link" target="_self" rel="noopener">Gestione Cookies</a>
<br><a data-href="#Gestione Sessioni" href="about:blank#Gestione_Sessioni" class="internal-link" target="_self" rel="noopener">Gestione Sessioni</a>
<br><a data-href="#Invio Mail" href="about:blank#Invio_Mail" class="internal-link" target="_self" rel="noopener">Invio Mail</a>
<br><a data-href="#Gestione degli Errori" href="about:blank#Gestione_degli_Errori" class="internal-link" target="_self" rel="noopener">Gestione degli Errori</a>
<br><a data-href="#Error Levels" href="about:blank#Error_Levels" class="internal-link" target="_self" rel="noopener">Error Levels</a>
<br><br>In questa sezione troviamo alcune tecniche di gestione avanzata del codice e delle risorse tramite PHP. Ognuna delle sezioni presentate è indipendente e può quindi servire come approfondimento personale oltreché per imparare una nuova tecnica con PHP.<br><br>Il contenuto di un file PHP può essere inserito e utilizzato dentro un altro file PHP prima che il server lo esegua, tramite le funzioni include() o require(). Le due funzioni sono identiche in tutto e per tutto tranne per come gestiscono gli errori:<br>
<br>include() genera uno warning, ma lo script continua l'esecuzione.
<br>require() genera un errore fatale, interrompendo l'esecuzione dello script<br>
Queste due funzioni sono utilizzate per creare funzioni, header e elementi da riutilizzare in più pagine.
<br>I cosiddetti Server Side Includes risparmiano un sacco di lavoro, facilitando un approccio moderno e sistemico nell'organizzazione del codice delle proprie applicazioni lato server.<br><br><br>&lt;?php
	function Nome($n){
		echo $n;
	}
?&gt;
Copy<br><br>&lt;?php
	include(“funzioni.php”);
	Nome(“Andrea”);
	echo “Benvenuto!”;
?&gt;
Copy<br><br>&lt;?php
	require(“funzioni.php”);
	Nome(“Andrea”);
	echo “Benvenuto!”;
?&gt;
Copy<br>Questi script presuppongono l'esistenza del file funzioni.php nella stessa directory ove essi si trovano. Nel caso di un errore, ad esempio la mancata presenza del file, il primo restituisce il seguente output:<br>Warning: include(funzioni.php) [function.include]:
failed to open stream:
No such file or directory in /home/website/prova1.php on line 2
Warning: include() [function.include]:
Failed opening 'funzioni.php' for inclusion (include_path='.;C:\php5\pear')
in /home/website/prova1.php on line 2
Benvenuto!
Copy<br>Quindi eseguendo comunque lo script come il “Benvenuto” finale, esecuzione dell'ultimo echo dimostra.<br>Il secondo file con direttiva require in caso di errore si comporta invece:
Warning: require(funzioni.php) [function.require]:
failed to open stream:
No such file or directory in /home/website/prova2.php on line 2
Fatal error: require() [function.require]:
Failed opening required 'funzioni.php' (include_path='.;C:\php5\pear')
in /home/website/prova2.php on line 2
Copy<br>Fermando dunque l'esecuzione dello script in cui un errore si verifica.<br><br>The funzione fopen() viene utilizzata per aprire i file in PHP. Il primo parametro di questa funzione contiene il nome del file da aprire, mentre il secondo specifica in che modo il file dovrà essere aperto:<br>&lt;?php
	$file = fopen( "welcome.txt" , "r" );
?&gt;
Copy<br>Un file può essere aperto nei seguenti modi:<br><br>Se la funzione fopen() non è in grado di aprire il file specificato, restituisce 0 (false), informazione che può essere utilizzata come nel seguente esempio:<br>$file = fopen("welcome.txt", "r") or exit("Impossibile aprire il file!");
Copy<br>La funzione fclose() viene utilizzata per chiudere un file:<br>$file = fopen("test.txt","r");
// qualcosa da fare con questo file
fclose($file);
Copy<br>La funzione feof() controlla che non si sia raggiunti la fine del file (eof = end of file). Restituisce un valore booleano di conferma.<br>if (feof($file))
	echo "Raggiunta fine del file";
Copy<br>Per leggere una singola linea dal un file di testo, è necessario utilizzare la funzione fgets(). Dopo una chiamata a questa funzione il file pointer si muove alla linea successiva, rendendo possibile costruire un ciclo di lettura con questa funzione:<br>$file = fopen("welcome.txt", "r") or exit("Unable to open file!");
while(!feof($file)){
	echo fgets($file). "&lt;br /&gt;";
}
fclose($file);
Copy<br>La funzione fgetc() legge un singolo carattere da un file, spostando automaticamente il file pointer all'inizio del prossimo carattere.<br>$file = fopen("welcome.txt","r") or exit("Unable to open file!");
while (!feof($file)){
	echo fgetc($file);
}
fclose($file);
Copy<br><br>Con PHP è possibile ad esempio eseguire l'upload di un file dalla macchina client alla macchina server. Questa operazione viene eseguita creando due semplici script: il form HTML per la scelta del file da parte dell'utente e il codice di upload del file dal client al server.<br>Il form HTML che permette l'upload di un file può essere definito così:<br>&lt;form action="upload.php" method="post" enctype="multipart/form-data"&gt;
	&lt;label for="file"&gt;Filename:&lt;/label&gt;
	&lt;input type="file" name="file" id="file" /&gt;
	&lt;br /&gt;
	&lt;input type="submit" name="submit" value="Submit" /&gt;
&lt;/form&gt;
Copy<br>Da notare le seguenti particolarità del codice HTML sopra:<br>
<br>L'attributo enctype dell'elemento form specifica quale contenuto verrà spedito dal form. Il valore “multipart/form-data” viene utilizzato per i dati binari generici.
<br>Il valore “file” dell'attributo type dell'elemento input permette la selezione di un elemento dal file system.
<br>In generale, permettere agli utenti un upload di file sul server è un grosso rischio e bisognerebbe permetterlo solo ad utenti autenticati e a certe condizioni.<br>
Lo script “upload.php” chiamato dal form al submit conterrà il codice (appunto) per l'upload.<br>if ($_FILES["file"]["error"] &gt; 0){
	echo "Error: " . $_FILES["file"]["error"] . "&lt;br /&gt;";
}else{
	echo "Upload: " . $_FILES["file"]["name"] . "&lt;br /&gt;";
	echo "Type: " . $_FILES["file"]["type"] . "&lt;br /&gt;";
	echo "Size: " . ($_FILES["file"]["size"] / 1024) . " Kb&lt;br /&gt;";
	echo "Stored in: " . $_FILES["file"]["tmp_name"];
}
Copy<br>Utilizzando l'array globale PHP $_FILES si può fare l'upload di file dal client a un server remoto. Il primo parametro è il nome dell'input form e il secondo indice può essere uno fra “name”, “type”, “size”, “tmp_name”, “error”.<br>
<br>$_FILES["file"]["name"] – nome del file di cui fare l'upload
<br>$_FILES["file"]["type"] – tipo del file
<br>$_FILES["file"]["size"] – dimensione in byte del file
<br>$_FILES["file"]["tmp_name"] – nome della copia temporanea del file sul server
<br>$_FILES["file"]["error"] – il codice di errore risultato dall'upload
<br>Questo esempio è comunque banale e per motivi di sicurezza bisognerebbe comunque implementare controlli sul tipo, la dimensione e sul numero di file uploadabili da ogni utente prima di permettere una tale libertà.<br>Il codice precedente crea una copia temporanea del file sul server che viene distrutta al termine dello script PHP. Per mantenerla in memoria occorre copiarla in un'altra directory<br>if (file_exists("upload/" . $_FILES["file"]["name"])){
	echo $_FILES["file"]["name"] . " already exists. ";
}else{
	move_uploaded_file($_FILES["file"]["tmp_name"], "upload/" . $_FILES["file"]["name"]);
	echo "Stored in: " . "upload/" . $_FILES["file"]["name"];
}
Copy<br><br>Un cookie (letteralmente, biscottino) è un piccolo file che il server inserisce nel computer di un utente per identificarlo alla prossima visita. Ogni volta che un browser richiede una pagina, il server risponde inviando anche un cookie insieme alla pagina. Tramite il PHP è possibile sia creare che ricevere dei cookie.<br>Come è possibile creare un cookie? E' possibile creare un cookie semplicemente tramite la funzione setCookie(). Questa funzione per essere efficace deve essere eseguita PRIMA del tag &lt;html&gt; della pagina a cui il cookie si riferisce.<br>
Vediamone la sintassi:<br>setcookie(name, value, expire, path, domain);
Copy<br>Vediamo qualche esempio di utilizzo dei cookie per cominciarne a capire l'utilità. In questo primo esempio viene creato un cookie che contiene il mio nome e che sarà valido per un'ora<br>&lt;?php
	setcookie("nome", "Andrea", time()+3600);
?&gt;
&lt;/html&gt;
.....
Copy<br>Il valore del cookie è automaticamente URLencoded quando questo viene inviato. Se si vuole prevenire questa funzione automatica, occorre usare la funzione setrawcookie().<br>
Nel prossimo esempio si inserisce un cookie con un dato che abbia validità per un mese (1 mese = 60 ss  60 mm  24 hh * 30 gg)<br>$expire = time()+60*60*24*30;
setcookie("nome", "Andrea", $expire);
Copy<br>Per andare a controllare i valori impostati precedentemente tramite cookie si utilizza l'array associativo $_COOKIE, che contiene come indici i nomi delle variabili impostate tramite cookie e al suo interno i loro valori:<br>echo $_COOKIE["nome"];
// oppure, per vedere tutti i cookies
print_r($_COOKIE);
Copy<br>Un'altra cosa solitamente utile da controllare sui cookie che si trovano già sulla macchina client è se hanno un certo valore già impostato:<br>if (isset($_COOKIE["nome"]))
	echo "Ciao " . $_COOKIE["user"] . "!&lt;br /&gt;";
else
	echo "Benvenuto per la prima volta qui!&lt;br /&gt;";
Copy<br>Se infine si vuole cancellare un cookie (tramite PHP ovviamente, non tramite le impostazioni e le utility di un browser), bisogna fargli credere di essere scaduto. Infatti, i cookie che superano il loro “expire time” si auto cancellano automaticamente:<br>L'esempio imposta il valore di scadenza del cookie precedente con il nome memorizzato ad un'ora fa:<br>setcookie("nome", "", time()-3600);
Copy<br><br>Una variabile di sessione PHP viene utilizzata per immagazzinare le informazioni necessarie ad una sessione utente. Le variabili di sessione contengono informazioni su un singolo utente e sono disponibili in tutte le pagine di una applicazione. Quando si lavora davanti al computer, magari scrivendo un testo con un semplice editor, il sistema operativo ha informazioni precise su chi sei e cosa puoi fare, sa quando è stata avviata l'applicazione che stai usando e si accorgerà di quando la chiuderai. Tutte queste informazioni sono sconosciute su Internet (per fortuna) per la natura stessa delle connessioni HTTP che vengono usate (stateless). Le sessioni PHP risolvono questo problema permettendo di immagazzinare informazioni come il nome utente, le pagine visitate, gli acquisti selezionati o altro per un uso successivo. In ogni caso, queste informazioni sono temporanee e saranno cancellate quando l'utente lascerà il sito. Per salvare informazioni in maniera permanente occorrerà utilizzare un file o meglio ancora un database. Le sessioni funzionano creando un ID unico (UID) per ogni visitatore e memorizzando le variabili relative a questo, basandosi sul suo UID. Questo viene inoltre memorizzato in un cookie temporaneo o inviato tramite l'URL.<br>Prima di poter immagazzinare informazioni in una sessione PHP è necessario iniziarne una:<br>&lt;?php session_start(); ?&gt;
&lt;html&gt;
...
Copy<br>Anche qui, l'istruzione session_start() deve essere eseguita PRIMA del tag &lt;html&gt;. Questa funzione registra la sessione utente nel server, assegnando un UID per quella sessione.<br>
Per inserire informazioni di sessione, è necessario utilizzare la variabile $_SESSION, l'ennesimo array associativo che incontriamo in PHP:<br>$_SESSION['visite']=1;
Copy<br>Nell'esempio seguente si crea un contatore di visite come può essere la variabile qui sopra e poi lo si aggiorna ad ogni visita di quella pagina, controllando con la funzione isset() se è stata già impostata (pagina già visitata, incremento del contatore) oppure no (contatore visite a 1).<br>&lt;?php
	session_start();
	if(isset($_SESSION['visite']))
		$_SESSION['visite']++;
	else
		$_SESSION['visite']=1;
?&gt;
Copy<br>Per cancellare alcuni dati di sessione è possibile utilizzare la funzione unset():<br>unset($_SESSION['visite']);
Copy<br>Per terminare completamente una sessione, distruggendo quindi tutti i dati relativi, si utilizza la funzione session_destroy().<br>session_destroy();
Copy<br><br>Il linguaggio PHP permette di inviare email direttamente da uno script, tramite la funzione mail(). Ovviamente per rendere questo possibile, è necessario che vi sia installato un mail server funzionante.<br>mail(to, subject, message, headers, parameters);
Copy<br><br>Il modo più semplice di inviare una mail con PHP è quello di scrivere una mail di testo. Nell'esempio sottostante, prima vengono dichiarate le variabili che si utilizzeranno ($to, $subject, $message, $from, $headers) e poi vengono utilizzate nella funzione mail().<br>&lt;?php
	$to = "te@esempio.com";
	$subject = "mail di prova";
	$message = "Ciao! Se ti arriva questa, siamo i draghi del PHP!”;
	$from = "me@esempio.com";
	$headers = "From: $from";
	mail($to,$subject,$message,$headers);
	echo "Posta inviata.";
?&gt;
Copy<br>Questa semplice tecnica di invio delle mail può essere implementata per creare ad esempio un form di invio mail in un sito. Basterà prendere i valori inseriti da un utente in alcuni campi specifici e assegnarli a delle variabili come nell'esempio sopra.<br>
Ovviamente questo semplicissimo metodo può comportare un sacco di inconvenienti, quindi occore in ogni caso validare i contenuti dei campi immessi dagli utenti prima di avviare il comando di invio mail.<br><br>Il meccanismo standard di gestione degli errori in PHP è molto semplice: ad ogni errore nel codice viene inviato un messaggio al browser con nome del file, numero di linea e descrizione dell'errore avvenuto.<br>
Quando si creano script e applicazioni web, la gestione degli errori è una parte importante. Se un'applicazione manca del controllo degli errori sembra solitamente poco professionale e può inoltre aprire il varco a possibili problemi di sicurezza.<br>
I metodi più utilizzati di controllo degli errori in PHP sono<br>
<br>l'utilizzo della funzione die()
<br>l'utilizzo dei trigger
<br>la visualizzazione degli errori
<br>Se si prova ad esempio ad aprire con opzione “r” un file inesistente<br>$file=fopen("prova.txt","r");
Copy<br>il PHP riporta il seguente errore<br>Warning: fopen(prova.txt) [function.fopen]: failed to open stream:
No such file or directory in fileXX on line YY
Copy<br>Lo stesso non avviene se il programmatore controlla l'esistenza del file prima di aprirlo<br>if(!file_exists("prova.txt"))
	die("File not found");
else
	$file=fopen("prova.txt","r");
Copy<br>Che invece di un messaggio di errore del codice riporta la scritta “File not found”, decisa in fase di creazione dell'applicazione. Ovviamente, interrompere lo script e lasciare un semplice messaggio di errore non è sempre la strada migliore e a volte non è neanche possibile, per non lasciare l'applicazione in uno stato inconsistente. Il PHP fornisce come alternativa delle funzioni di gestione degli errori, i cosiddetti “error handler”. Queste funzioni, eseguite quando occorre un particolare errore, devono essere in grado di gestire almeno due parametri:<br>
<br>error level
<br>error description
<br>ma possono in generale arrivare a gestirne fino a cinque, includendo anche:<br>
<br>file
<br>line number
<br>error context
<br>Vediamo la sintassi:<br>err_funct(err_level, err_message, err_file, err_line, err_context);
Copy<br><br><br><br>Adesso, creiamo una funzione per gestire gli errori:<br>function customError($errno, $errstr){
	echo "&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;";
	echo "Ending Script";
	die();
}
Copy<br>Questa funzione semplicemente prende error level e error description, li scrive su schermo e termina lo script. Per lanciare questa funzione ad ogni occorrenza di un errore, bisogna installare un error handler per quella funzione, tramite la funzione set_error_handler().<br>set_error_handler("customError");
Copy<br>In questo modo la funzione customError gestirà tutti i messaggi di errore. Se invece volessimo assegnarla alla gestione di soli di errori di tipo E_WARNING, avremmo dovuto scrivere<br>set_error_handler("customError", E_WARNING);
Copy<br>Negli script che hanno a che fare con l'input utente è molto comodo definire un errore e lanciarlo quando avviene un input sbagliato. In PHP questo può essere realizzato tramite la funzione trigger_errno().<br>$test=2;
if ($test&gt;1)
	trigger_error("Value must be 1 or below");
Copy<br>E ancora, aggiungendo un secondo parametro alla funzione può essere specificato il tipo di errore da eseguire. Possibili tipi per gli errori utente sono:<br>
<br>E_USER_ERROR – Errore fatale generato dall'utente a runtime. Provoca l'interruzione dell'esecuzione dello script.
<br>E_USER_WARNING - Errore non fatale generato dall'utente a runtime. Non interrompe l'esecuzione dello script.
<br>E_USER_NOTICE - Default. Informazione di runtime generata da un input utente.
<br>In questo esempio, se la variabile test è più grande di uno, viene lanciato un errore<br>
E_USER_WARNING per cui è stato installato un gestore apposito che interrompe lo script (anche se questo non sarebbe il comportamento PHP predefinito).<br>//error handler function
function customError($errno, $errstr){
	echo "&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;";
	echo "Ending Script";
	die();
}
//set error handler
set_error_handler("customError",E_USER_WARNING);
//trigger error
$test=2;
if ($test&gt;1)
	trigger_error("Value must be 1 or below",E_USER_WARNING);
Copy<br>In generale il PHP scrive un un file di log (il cosiddetto error_log, la cui locazione è impostata nel file php.ini) tutte le occorrenze di errori che avvengono.<br>
E' possibile in ogni caso, tramite la funzione error_log() inviare gli errori ad un altro file, oppure ad una destinazione remota (un email, ad esempio).<br>
Vediamo come realizzare quest'ultimo esempio:<br>//error handler function
function customError($errno, $errstr){
	echo "&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;";
	echo "Webmaster has been notified";
	error_log("Error: [$errno] $errstr",1, "me@esempio.com","From: php@esempio.com");
}
//set error handler
set_error_handler("customError",E_USER_WARNING);
//trigger error
$test=2;
if ($test&gt;1)
	trigger_error("Value must be 1 or below",E_USER_WARNING);
Copy<br><a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:teoria" class="tag" target="_blank" rel="noopener">#teoria</a> ]]></description><link>php\introduzione\tecniche-avanzate-con-php.html</link><guid isPermaLink="false">PHP/Introduzione/Tecniche avanzate con PHP.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Sat, 17 Feb 2024 10:52:43 GMT</pubDate></item><item><title><![CDATA[Glossario PHP - Introduzione]]></title><description><![CDATA[<a class="tag" href="?query=tag:glossario" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#glossario</a> 
 <br>
<br><a data-href="Introduzione" href="php\introduzione\introduzione.html" class="internal-link" target="_self" rel="noopener">Introduzione</a>
<br><a data-href="Istruzioni condizionali" href="php\introduzione\istruzioni-condizionali.html" class="internal-link" target="_self" rel="noopener">Istruzioni condizionali</a>
<br><a data-href="Array" href="php\introduzione\array.html" class="internal-link" target="_self" rel="noopener">Array</a>
<br><a data-href="Istruzioni iterative" href="php\introduzione\istruzioni-iterative.html" class="internal-link" target="_self" rel="noopener">Istruzioni iterative</a>
<br><a data-href="Gestione dei FORM con PHP" href="php\introduzione\gestione-dei-form-con-php.html" class="internal-link" target="_self" rel="noopener">Gestione dei FORM con PHP</a>
<br><a data-href="Funzioni PHP" href="php\introduzione\funzioni-php.html" class="internal-link" target="_self" rel="noopener">Funzioni PHP</a>
<br><a data-href="Tecniche avanzate con PHP" href="php\introduzione\tecniche-avanzate-con-php.html" class="internal-link" target="_self" rel="noopener">Tecniche avanzate con PHP</a>
<br><a data-href="PHP e DATABASE" href="php\introduzione\php-e-database.html" class="internal-link" target="_self" rel="noopener">PHP e DATABASE</a>
<br><a data-tooltip-position="top" aria-label="Index" data-href="Index" href="index.html" class="internal-link" target="_self" rel="noopener">Torna indietro</a><br><a href=".?query=tag:glossario" class="tag" target="_blank" rel="noopener">#glossario</a> ]]></description><link>php\glossario-php-introduzione.html</link><guid isPermaLink="false">PHP/Glossario PHP - Introduzione.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Thu, 15 Feb 2024 09:00:56 GMT</pubDate></item><item><title><![CDATA[Index]]></title><description><![CDATA[<a class="tag" href="?query=tag:main" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#main</a> 
 <br>Java:<br>
- <a data-href="Concetti sulla Programmazione OOP" href="java\programmazione-oop\concetti-sulla-programmazione-oop.html" class="internal-link" target="_self" rel="noopener">Concetti sulla Programmazione OOP</a><br>
- <a data-href="La classe Scanner" href="java\la-classe-scanner\la-classe-scanner.html" class="internal-link" target="_self" rel="noopener">La classe Scanner</a><br>
- <a data-tooltip-position="top" aria-label="Glossario - Grafica Java" data-href="Glossario - Grafica Java" href="java\glossario-grafica-java.html" class="internal-link" target="_self" rel="noopener">Grafica</a><br>
- <a data-tooltip-position="top" aria-label="Glossario - Gestione File" data-href="Glossario - Gestione File" href="java\glossario-gestione-file.html" class="internal-link" target="_self" rel="noopener">Gestione File</a><br>JavaScript:<br>
- <a data-tooltip-position="top" aria-label="JavaScript/Glossario - jQuery JavaScript" data-href="JavaScript/Glossario - jQuery JavaScript" href="javascript\glossario-jquery-javascript.html" class="internal-link" target="_self" rel="noopener">jQuery</a><br>PHP:<br>
- <a data-tooltip-position="top" aria-label="Glossario PHP - Introduzione" data-href="Glossario PHP - Introduzione" href="php\glossario-php-introduzione.html" class="internal-link" target="_self" rel="noopener">Introduzione</a><br><a href=".?query=tag:main" class="tag" target="_blank" rel="noopener">#main</a>]]></description><link>index.html</link><guid isPermaLink="false">Index.md</guid><dc:creator><![CDATA[zela2000]]></dc:creator><pubDate>Mon, 24 Jun 2024 11:52:46 GMT</pubDate></item></channel></rss>